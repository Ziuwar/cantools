/**
 * @file fm29_dbc.cpp
 *
 * @brief This source file was generated by cantools version 0.1.dev1820+g40ef96e.d20250207 Thu Mar  6 08:54:43 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <string.h>

#include "fm29_dbc.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t unpack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) << shift);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) >> shift);
}

int fm29_dbc_bms_pst_current_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_pst_current_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0xecu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_curr_pst_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_curr_pst_alive_counter, 0u, 0x0fu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_bat_d_ma_xcurr_pst, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_bat_d_ma_xcurr_pst, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_c_ma_xcurr_pst, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_c_ma_xcurr_pst, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_pst_current_unpack(
    struct fm29_dbc_bms_pst_current_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0xecu)) {
        return (-EINVAL);
    }

    dst_p->bms_curr_pst_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_curr_pst_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_bat_d_ma_xcurr_pst = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_bat_d_ma_xcurr_pst |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_c_ma_xcurr_pst = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_c_ma_xcurr_pst |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_pst_current_init(struct fm29_dbc_bms_pst_current_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_pst_current_t));

    return 0;
}

uint8_t fm29_dbc_bms_pst_current_bms_curr_pst_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pst_current_bms_curr_pst_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pst_current_bms_curr_pst_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_pst_current_bms_curr_pst_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pst_current_bms_curr_pst_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pst_current_bms_curr_pst_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_bms_pst_current_bms_bat_d_ma_xcurr_pst_encode(double value)
{
    return (uint16_t)(value / 0.05);
}

double fm29_dbc_bms_pst_current_bms_bat_d_ma_xcurr_pst_decode(uint16_t value)
{
    return ((double)value * 0.05);
}

bool fm29_dbc_bms_pst_current_bms_bat_d_ma_xcurr_pst_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_pst_current_bms_bat_c_ma_xcurr_pst_encode(double value)
{
    return (uint16_t)(value / 0.05);
}

double fm29_dbc_bms_pst_current_bms_bat_c_ma_xcurr_pst_decode(uint16_t value)
{
    return ((double)value * 0.05);
}

bool fm29_dbc_bms_pst_current_bms_bat_c_ma_xcurr_pst_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x36_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x36_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x36u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_rem_seek_car_ctrl_cmd, 2u, 0x0cu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_rem_drvr_seat_heatg_cmd, 5u, 0xe0u);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_rem_drvr_seat_ventn_cmd, 2u, 0x1cu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_rem_cls_tr_cmd, 0u, 0x03u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_rem_pass_seat_heatg_cmd, 5u, 0xe0u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_rem_pass_seat_ventn_cmd, 2u, 0x1cu);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_rem_set_wel_fct, 0u, 0x03u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_rem_set_folw_me_fct_bcm, 5u, 0xe0u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_cls_rem_avm_fct_avap, 4u, 0x10u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_cls_avm_fct_icc, 3u, 0x08u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_voice_blower_lim_req, 7u, 0x80u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_video_ctrl_req, 4u, 0x70u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_rem_set_kick_snsr_fct, 2u, 0x0cu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_rem_set_ctrl_lock_fct_pkc, 0u, 0x03u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_rem_re_scrn_heatg_cmd, 6u, 0xc0u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_e_call_mute_st, 4u, 0x30u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_ctrl_re_mirr_req, 2u, 0x0cu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_rem_ctrl_cmd_fb, 0u, 0x03u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_e_call_st, 0u, 0x07u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x36_unpack(
    struct fm29_dbc_tbox_0x36_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x36u)) {
        return (-EINVAL);
    }

    dst_p->tbox_rem_seek_car_ctrl_cmd = unpack_right_shift_u8(msg_p->data[0], 2u, 0x0cu);
    dst_p->tbox_rem_drvr_seat_heatg_cmd = unpack_right_shift_u8(msg_p->data[1], 5u, 0xe0u);
    dst_p->tbox_rem_drvr_seat_ventn_cmd = unpack_right_shift_u8(msg_p->data[1], 2u, 0x1cu);
    dst_p->tbox_rem_cls_tr_cmd = unpack_right_shift_u8(msg_p->data[1], 0u, 0x03u);
    dst_p->tbox_rem_pass_seat_heatg_cmd = unpack_right_shift_u8(msg_p->data[2], 5u, 0xe0u);
    dst_p->tbox_rem_pass_seat_ventn_cmd = unpack_right_shift_u8(msg_p->data[2], 2u, 0x1cu);
    dst_p->tbox_rem_set_wel_fct = unpack_right_shift_u8(msg_p->data[2], 0u, 0x03u);
    dst_p->tbox_rem_set_folw_me_fct_bcm = unpack_right_shift_u8(msg_p->data[3], 5u, 0xe0u);
    dst_p->tbox_cls_rem_avm_fct_avap = unpack_right_shift_u8(msg_p->data[3], 4u, 0x10u);
    dst_p->tbox_cls_avm_fct_icc = unpack_right_shift_u8(msg_p->data[3], 3u, 0x08u);
    dst_p->tbox_voice_blower_lim_req = unpack_right_shift_u8(msg_p->data[4], 7u, 0x80u);
    dst_p->tbox_video_ctrl_req = unpack_right_shift_u8(msg_p->data[4], 4u, 0x70u);
    dst_p->tbox_rem_set_kick_snsr_fct = unpack_right_shift_u8(msg_p->data[4], 2u, 0x0cu);
    dst_p->tbox_rem_set_ctrl_lock_fct_pkc = unpack_right_shift_u8(msg_p->data[4], 0u, 0x03u);
    dst_p->tbox_rem_re_scrn_heatg_cmd = unpack_right_shift_u8(msg_p->data[5], 6u, 0xc0u);
    dst_p->tbox_e_call_mute_st = unpack_right_shift_u8(msg_p->data[5], 4u, 0x30u);
    dst_p->tbox_ctrl_re_mirr_req = unpack_right_shift_u8(msg_p->data[5], 2u, 0x0cu);
    dst_p->tbox_rem_ctrl_cmd_fb = unpack_right_shift_u8(msg_p->data[5], 0u, 0x03u);
    dst_p->tbox_e_call_st = unpack_right_shift_u8(msg_p->data[7], 0u, 0x07u);

    return (0);
}

int fm29_dbc_tbox_0x36_init(struct fm29_dbc_tbox_0x36_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x36_t));
    msg_p->tbox_rem_seek_car_ctrl_cmd = 0;
    msg_p->tbox_rem_drvr_seat_heatg_cmd = 0;
    msg_p->tbox_rem_drvr_seat_ventn_cmd = 0;
    msg_p->tbox_rem_cls_tr_cmd = 0;
    msg_p->tbox_rem_pass_seat_heatg_cmd = 0;
    msg_p->tbox_rem_pass_seat_ventn_cmd = 0;
    msg_p->tbox_rem_set_wel_fct = 0;
    msg_p->tbox_rem_set_folw_me_fct_bcm = 0;
    msg_p->tbox_cls_rem_avm_fct_avap = 0;
    msg_p->tbox_cls_avm_fct_icc = 0;
    msg_p->tbox_voice_blower_lim_req = 0;
    msg_p->tbox_video_ctrl_req = 0;
    msg_p->tbox_rem_set_kick_snsr_fct = 0;
    msg_p->tbox_rem_set_ctrl_lock_fct_pkc = 0;
    msg_p->tbox_rem_re_scrn_heatg_cmd = 0;
    msg_p->tbox_e_call_mute_st = 0;
    msg_p->tbox_ctrl_re_mirr_req = 0;
    msg_p->tbox_rem_ctrl_cmd_fb = 0;
    msg_p->tbox_e_call_st = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_seek_car_ctrl_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_seek_car_ctrl_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_seek_car_ctrl_cmd_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_drvr_seat_heatg_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_drvr_seat_heatg_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_drvr_seat_heatg_cmd_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_drvr_seat_ventn_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_drvr_seat_ventn_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_drvr_seat_ventn_cmd_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_cls_tr_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_cls_tr_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_cls_tr_cmd_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_pass_seat_heatg_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_pass_seat_heatg_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_pass_seat_heatg_cmd_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_pass_seat_ventn_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_pass_seat_ventn_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_pass_seat_ventn_cmd_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_set_wel_fct_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_set_wel_fct_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_set_wel_fct_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_set_folw_me_fct_bcm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_set_folw_me_fct_bcm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_set_folw_me_fct_bcm_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_cls_rem_avm_fct_avap_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_cls_rem_avm_fct_avap_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_cls_rem_avm_fct_avap_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_cls_avm_fct_icc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_cls_avm_fct_icc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_cls_avm_fct_icc_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_voice_blower_lim_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_voice_blower_lim_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_voice_blower_lim_req_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_video_ctrl_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_video_ctrl_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_video_ctrl_req_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_set_kick_snsr_fct_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_set_kick_snsr_fct_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_set_kick_snsr_fct_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_set_ctrl_lock_fct_pkc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_set_ctrl_lock_fct_pkc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_set_ctrl_lock_fct_pkc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_re_scrn_heatg_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_re_scrn_heatg_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_re_scrn_heatg_cmd_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_e_call_mute_st_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_e_call_mute_st_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_e_call_mute_st_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_ctrl_re_mirr_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_ctrl_re_mirr_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_ctrl_re_mirr_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_rem_ctrl_cmd_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_rem_ctrl_cmd_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_rem_ctrl_cmd_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x36_tbox_e_call_st_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x36_tbox_e_call_st_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x36_tbox_e_call_st_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int fm29_dbc_tbox_0x58_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x58_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x58u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_rem_cls_win_rw_ctrl_cmd, 1u, 0xfeu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_california_mode, 6u, 0xc0u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_rem_cls_sunroof_ctrl_cmd, 0u, 0x7fu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_58_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_58_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_58_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_58_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x58_unpack(
    struct fm29_dbc_tbox_0x58_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x58u)) {
        return (-EINVAL);
    }

    dst_p->tbox_rem_cls_win_rw_ctrl_cmd = unpack_right_shift_u8(msg_p->data[0], 1u, 0xfeu);
    dst_p->tbox_california_mode = unpack_right_shift_u8(msg_p->data[1], 6u, 0xc0u);
    dst_p->tbox_rem_cls_sunroof_ctrl_cmd = unpack_right_shift_u8(msg_p->data[3], 0u, 0x7fu);
    dst_p->tbox_58_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[4], 0u, 0xffu);
    dst_p->tbox_58_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->tbox_58_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);
    dst_p->tbox_58_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_tbox_0x58_init(struct fm29_dbc_tbox_0x58_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x58_t));
    msg_p->tbox_california_mode = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x58_tbox_rem_cls_win_rw_ctrl_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_rem_cls_win_rw_ctrl_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_rem_cls_win_rw_ctrl_cmd_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

uint8_t fm29_dbc_tbox_0x58_tbox_california_mode_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_california_mode_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_california_mode_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x58_tbox_rem_cls_sunroof_ctrl_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_rem_cls_sunroof_ctrl_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_rem_cls_sunroof_ctrl_cmd_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

uint8_t fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x58_tbox_58_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_acu_0x59_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_acu_0x59_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x59u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->acu_59_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->acu_frnt_crash_outp_sts, 4u, 0x70u);
    msg.data[1] |= pack_left_shift_u8(src_p->acu_59_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->acu_rollovr_crash_outp_sts, 6u, 0xc0u);
    msg.data[2] |= pack_left_shift_u8(src_p->acu_rear_crash_outp_sts, 4u, 0x30u);
    msg.data[2] |= pack_left_shift_u8(src_p->acu_le_side_crash_outp_sts, 2u, 0x0cu);
    msg.data[2] |= pack_left_shift_u8(src_p->acu_ri_side_crash_outp_sts, 0u, 0x03u);
    msg.data[3] |= pack_left_shift_u8(src_p->acu_crash_cfm, 0u, 0x03u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_acu_0x59_unpack(
    struct fm29_dbc_acu_0x59_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x59u)) {
        return (-EINVAL);
    }

    dst_p->acu_59_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->acu_frnt_crash_outp_sts = unpack_right_shift_u8(msg_p->data[1], 4u, 0x70u);
    dst_p->acu_59_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->acu_rollovr_crash_outp_sts = unpack_right_shift_u8(msg_p->data[2], 6u, 0xc0u);
    dst_p->acu_rear_crash_outp_sts = unpack_right_shift_u8(msg_p->data[2], 4u, 0x30u);
    dst_p->acu_le_side_crash_outp_sts = unpack_right_shift_u8(msg_p->data[2], 2u, 0x0cu);
    dst_p->acu_ri_side_crash_outp_sts = unpack_right_shift_u8(msg_p->data[2], 0u, 0x03u);
    dst_p->acu_crash_cfm = unpack_right_shift_u8(msg_p->data[3], 0u, 0x03u);

    return (0);
}

int fm29_dbc_acu_0x59_init(struct fm29_dbc_acu_0x59_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_acu_0x59_t));
    msg_p->acu_frnt_crash_outp_sts = 0;
    msg_p->acu_rollovr_crash_outp_sts = 0;
    msg_p->acu_rear_crash_outp_sts = 0;
    msg_p->acu_le_side_crash_outp_sts = 0;
    msg_p->acu_ri_side_crash_outp_sts = 0;
    msg_p->acu_crash_cfm = 0;

    return 0;
}

uint8_t fm29_dbc_acu_0x59_acu_59_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_59_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_59_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_acu_0x59_acu_frnt_crash_outp_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_frnt_crash_outp_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_frnt_crash_outp_sts_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_acu_0x59_acu_59_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_59_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_59_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_acu_0x59_acu_rollovr_crash_outp_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_rollovr_crash_outp_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_rollovr_crash_outp_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_acu_0x59_acu_rear_crash_outp_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_rear_crash_outp_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_rear_crash_outp_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_acu_0x59_acu_le_side_crash_outp_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_le_side_crash_outp_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_le_side_crash_outp_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_acu_0x59_acu_ri_side_crash_outp_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_ri_side_crash_outp_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_ri_side_crash_outp_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_acu_0x59_acu_crash_cfm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_acu_0x59_acu_crash_cfm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_acu_0x59_acu_crash_cfm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int fm29_dbc_tbox_0x79_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x79_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x79u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_lrn_fb_info_classn, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_lrng_sts, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x79_unpack(
    struct fm29_dbc_tbox_0x79_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x79u)) {
        return (-EINVAL);
    }

    dst_p->tbox_lrn_fb_info_classn = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->tbox_lrng_sts = unpack_right_shift_u8(msg_p->data[1], 0u, 0xffu);

    return (0);
}

int fm29_dbc_tbox_0x79_init(struct fm29_dbc_tbox_0x79_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x79_t));
    msg_p->tbox_lrn_fb_info_classn = 0;
    msg_p->tbox_lrng_sts = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x79_tbox_lrn_fb_info_classn_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x79_tbox_lrn_fb_info_classn_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x79_tbox_lrn_fb_info_classn_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x79_tbox_lrng_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x79_tbox_lrng_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x79_tbox_lrng_sts_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x7_a_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x7_a_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x7au;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_lrng_sub_id_7_a, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_lrng_data1, 0u, 0xffu);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_lrng_data2, 0u, 0xffu);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_lrng_data3, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_lrng_data4, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_lrng_data5, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_lrng_data6, 0u, 0xffu);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_lrng_data7, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x7_a_unpack(
    struct fm29_dbc_tbox_0x7_a_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x7au)) {
        return (-EINVAL);
    }

    dst_p->tbox_lrng_sub_id_7_a = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->tbox_lrng_data1 = unpack_right_shift_u8(msg_p->data[1], 0u, 0xffu);
    dst_p->tbox_lrng_data2 = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->tbox_lrng_data3 = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->tbox_lrng_data4 = unpack_right_shift_u8(msg_p->data[4], 0u, 0xffu);
    dst_p->tbox_lrng_data5 = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->tbox_lrng_data6 = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);
    dst_p->tbox_lrng_data7 = unpack_right_shift_u8(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_tbox_0x7_a_init(struct fm29_dbc_tbox_0x7_a_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x7_a_t));
    msg_p->tbox_lrng_sub_id_7_a = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_sub_id_7_a_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_sub_id_7_a_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_sub_id_7_a_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data3_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data3_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data3_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data4_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data4_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data4_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data5_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data5_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data5_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data6_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data6_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data6_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x7_a_tbox_lrng_data7_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x7_a_tbox_lrng_data7_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x7_a_tbox_lrng_data7_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_vcu_0x93_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_vcu_0x93_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x93u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 10u;

    msg.data[0] |= pack_left_shift_u8(src_p->vcu_93_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_isolation_monitor_rq, 5u, 0x20u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_emgy_shut_off, 4u, 0x10u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_93_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_set_bms_mod, 4u, 0xf0u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_set_chrg_mod, 0u, 0x0fu);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_set_balc_mod, 4u, 0xf0u);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_hvb_activate_deactivate_rq, 0u, 0x0fu);
    msg.data[8] |= pack_left_shift_u8(src_p->vcu_93_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[9] |= pack_left_shift_u8(src_p->vcu_93_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[10] |= pack_left_shift_u8(src_p->vcu_93_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[11] |= pack_left_shift_u8(src_p->vcu_93_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (16);
}

int fm29_dbc_vcu_0x93_unpack(
    struct fm29_dbc_vcu_0x93_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 10u) || (msg_p->id != 0x93u)) {
        return (-EINVAL);
    }

    dst_p->vcu_93_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->vcu_isolation_monitor_rq = unpack_right_shift_u8(msg_p->data[1], 5u, 0x20u);
    dst_p->vcu_emgy_shut_off = unpack_right_shift_u8(msg_p->data[1], 4u, 0x10u);
    dst_p->vcu_93_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->vcu_set_bms_mod = unpack_right_shift_u8(msg_p->data[2], 4u, 0xf0u);
    dst_p->vcu_set_chrg_mod = unpack_right_shift_u8(msg_p->data[2], 0u, 0x0fu);
    dst_p->vcu_set_balc_mod = unpack_right_shift_u8(msg_p->data[4], 4u, 0xf0u);
    dst_p->vcu_hvb_activate_deactivate_rq = unpack_right_shift_u8(msg_p->data[4], 0u, 0x0fu);
    dst_p->vcu_93_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[8], 0u, 0xffu);
    dst_p->vcu_93_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[9], 0u, 0xffu);
    dst_p->vcu_93_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[10], 0u, 0xffu);
    dst_p->vcu_93_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[11], 0u, 0xffu);

    return (0);
}

int fm29_dbc_vcu_0x93_init(struct fm29_dbc_vcu_0x93_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_vcu_0x93_t));
    msg_p->vcu_isolation_monitor_rq = 0;
    msg_p->vcu_emgy_shut_off = 0;
    msg_p->vcu_93_alive_counter = 0;
    msg_p->vcu_set_bms_mod = 0;
    msg_p->vcu_set_chrg_mod = 0;
    msg_p->vcu_set_balc_mod = 0;
    msg_p->vcu_hvb_activate_deactivate_rq = 0;

    return 0;
}

uint8_t fm29_dbc_vcu_0x93_vcu_93_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_93_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_93_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x93_vcu_isolation_monitor_rq_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_isolation_monitor_rq_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_isolation_monitor_rq_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_emgy_shut_off_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_emgy_shut_off_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_emgy_shut_off_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_93_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_93_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_93_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_set_bms_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_set_bms_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_set_bms_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_set_chrg_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_set_chrg_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_set_chrg_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_set_balc_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_set_balc_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_set_balc_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_hvb_activate_deactivate_rq_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_hvb_activate_deactivate_rq_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_hvb_activate_deactivate_rq_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x93_vcu_93_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_actual_pack_u_i_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_actual_pack_u_i_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    uint16_t bms_bat_h_vmeasure_current;

    msg.id = 0xe9u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_bat_h_vmeasure_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_bat_h_vmeasure_alive_counter, 0u, 0x0fu);
    bms_bat_h_vmeasure_current = (uint16_t)src_p->bms_bat_h_vmeasure_current;
    msg.data[4] |= pack_right_shift_u16(bms_bat_h_vmeasure_current, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(bms_bat_h_vmeasure_current, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_hvmeasure_v_pack, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_hvmeasure_v_pack, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_actual_pack_u_i_unpack(
    struct fm29_dbc_bms_actual_pack_u_i_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    uint16_t bms_bat_h_vmeasure_current;

    if ((msg_p->dlc != 8u) || (msg_p->id != 0xe9u)) {
        return (-EINVAL);
    }

    dst_p->bms_bat_h_vmeasure_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_bat_h_vmeasure_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    bms_bat_h_vmeasure_current = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    bms_bat_h_vmeasure_current |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_h_vmeasure_current = (int16_t)bms_bat_h_vmeasure_current;
    dst_p->bms_bat_hvmeasure_v_pack = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_hvmeasure_v_pack |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_actual_pack_u_i_init(struct fm29_dbc_bms_actual_pack_u_i_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_actual_pack_u_i_t));

    return 0;
}

uint8_t fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

int16_t fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_current_encode(double value)
{
    return (int16_t)(value / 0.05);
}

double fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_current_decode(int16_t value)
{
    return ((double)value * 0.05);
}

bool fm29_dbc_bms_actual_pack_u_i_bms_bat_h_vmeasure_current_is_in_range(int16_t value)
{
    return ((value >= -25000) && (value <= 25000));
}

uint16_t fm29_dbc_bms_actual_pack_u_i_bms_bat_hvmeasure_v_pack_encode(double value)
{
    return (uint16_t)(value / 0.01);
}

double fm29_dbc_bms_actual_pack_u_i_bms_bat_hvmeasure_v_pack_decode(uint16_t value)
{
    return ((double)value * 0.01);
}

bool fm29_dbc_bms_actual_pack_u_i_bms_bat_hvmeasure_v_pack_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_hv_batt_status_errors_1_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_hv_batt_status_errors_1_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0xebu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_critical_error_flg_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_active_over_discharge_current, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_warning_over_discharge_current, 6u, 0x40u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_active_over_charge_current, 5u, 0x20u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_warning_over_charge_current, 4u, 0x10u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_critical_error_flg_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_active_iso_crit, 7u, 0x80u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_warning_iso, 6u, 0x40u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_active_soc_low, 5u, 0x20u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_warning_soc_low, 4u, 0x10u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_active_discharge_power_limit_hit, 3u, 0x08u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_warning_discharge_power_limit_hit, 2u, 0x04u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_active_charge_power_limit_hit, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_warning_charge_power_limit_hit, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_system_error_ommission_of_kl15, 7u, 0x80u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_system_error_kl30_c, 6u, 0x40u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_active_serv_state, 5u, 0x20u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_warning_overcurrent_prewarn, 4u, 0x10u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_active_abs_discharge_power_lim_hit, 3u, 0x08u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_active_abs_charge_power_lim, 2u, 0x04u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_active_abs_discharge_current_limit_h, 1u, 0x02u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_active_abs_charge_current_lim, 0u, 0x01u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_vlink_error_iso_dig_sig, 7u, 0x80u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_vlink_error_iso_dev, 6u, 0x40u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_vlink_error_vcu_comm_failure, 5u, 0x20u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_comm_error_pec_high, 4u, 0x10u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_comm_warning_pec_high, 3u, 0x08u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_comm_error_comm_failure, 2u, 0x04u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_system_error_hv_fuse, 1u, 0x02u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_system_error_hv_interlock, 0u, 0x01u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_error_active_cell_under_voltage, 7u, 0x80u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_error_warning_cell_under_voltage, 6u, 0x40u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_error_active_cell_over_voltage, 5u, 0x20u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_error_warning_cell_over_voltage, 4u, 0x10u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_software_error_general_failr, 3u, 0x08u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_hardware_error_lcm_general_failr, 2u, 0x04u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_vlink_error_hv_interlock_bad_sig_integr, 1u, 0x02u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_vlink_error_contactor_welded, 0u, 0x01u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_active_hv_under_voltage, 7u, 0x80u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_warning_hv_under_voltage, 6u, 0x40u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_active_hv_over_voltage, 5u, 0x20u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_warning_hv_over_voltage, 4u, 0x10u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_active_cell_temp_low, 3u, 0x08u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_warning_cell_temp_low, 2u, 0x04u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_active_cell_temp_high, 1u, 0x02u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_error_warning_cell_temp_high, 0u, 0x01u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_pviu_ca_ncomm_error, 0u, 0x01u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_hv_batt_status_errors_1_unpack(
    struct fm29_dbc_bms_hv_batt_status_errors_1_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0xebu)) {
        return (-EINVAL);
    }

    dst_p->bms_critical_error_flg_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_error_active_over_discharge_current = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->bms_error_warning_over_discharge_current = unpack_right_shift_u8(msg_p->data[1], 6u, 0x40u);
    dst_p->bms_error_active_over_charge_current = unpack_right_shift_u8(msg_p->data[1], 5u, 0x20u);
    dst_p->bms_error_warning_over_charge_current = unpack_right_shift_u8(msg_p->data[1], 4u, 0x10u);
    dst_p->bms_critical_error_flg_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_error_active_iso_crit = unpack_right_shift_u8(msg_p->data[2], 7u, 0x80u);
    dst_p->bms_error_warning_iso = unpack_right_shift_u8(msg_p->data[2], 6u, 0x40u);
    dst_p->bms_error_active_soc_low = unpack_right_shift_u8(msg_p->data[2], 5u, 0x20u);
    dst_p->bms_error_warning_soc_low = unpack_right_shift_u8(msg_p->data[2], 4u, 0x10u);
    dst_p->bms_error_active_discharge_power_limit_hit = unpack_right_shift_u8(msg_p->data[2], 3u, 0x08u);
    dst_p->bms_error_warning_discharge_power_limit_hit = unpack_right_shift_u8(msg_p->data[2], 2u, 0x04u);
    dst_p->bms_error_active_charge_power_limit_hit = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->bms_error_warning_charge_power_limit_hit = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->bms_system_error_ommission_of_kl15 = unpack_right_shift_u8(msg_p->data[3], 7u, 0x80u);
    dst_p->bms_system_error_kl30_c = unpack_right_shift_u8(msg_p->data[3], 6u, 0x40u);
    dst_p->bms_error_active_serv_state = unpack_right_shift_u8(msg_p->data[3], 5u, 0x20u);
    dst_p->bms_error_warning_overcurrent_prewarn = unpack_right_shift_u8(msg_p->data[3], 4u, 0x10u);
    dst_p->bms_error_active_abs_discharge_power_lim_hit = unpack_right_shift_u8(msg_p->data[3], 3u, 0x08u);
    dst_p->bms_error_active_abs_charge_power_lim = unpack_right_shift_u8(msg_p->data[3], 2u, 0x04u);
    dst_p->bms_error_active_abs_discharge_current_limit_h = unpack_right_shift_u8(msg_p->data[3], 1u, 0x02u);
    dst_p->bms_error_active_abs_charge_current_lim = unpack_right_shift_u8(msg_p->data[3], 0u, 0x01u);
    dst_p->bms_h_vlink_error_iso_dig_sig = unpack_right_shift_u8(msg_p->data[4], 7u, 0x80u);
    dst_p->bms_h_vlink_error_iso_dev = unpack_right_shift_u8(msg_p->data[4], 6u, 0x40u);
    dst_p->bms_h_vlink_error_vcu_comm_failure = unpack_right_shift_u8(msg_p->data[4], 5u, 0x20u);
    dst_p->bms_comm_error_pec_high = unpack_right_shift_u8(msg_p->data[4], 4u, 0x10u);
    dst_p->bms_comm_warning_pec_high = unpack_right_shift_u8(msg_p->data[4], 3u, 0x08u);
    dst_p->bms_comm_error_comm_failure = unpack_right_shift_u8(msg_p->data[4], 2u, 0x04u);
    dst_p->bms_system_error_hv_fuse = unpack_right_shift_u8(msg_p->data[4], 1u, 0x02u);
    dst_p->bms_system_error_hv_interlock = unpack_right_shift_u8(msg_p->data[4], 0u, 0x01u);
    dst_p->bms_error_active_cell_under_voltage = unpack_right_shift_u8(msg_p->data[5], 7u, 0x80u);
    dst_p->bms_error_warning_cell_under_voltage = unpack_right_shift_u8(msg_p->data[5], 6u, 0x40u);
    dst_p->bms_error_active_cell_over_voltage = unpack_right_shift_u8(msg_p->data[5], 5u, 0x20u);
    dst_p->bms_error_warning_cell_over_voltage = unpack_right_shift_u8(msg_p->data[5], 4u, 0x10u);
    dst_p->bms_software_error_general_failr = unpack_right_shift_u8(msg_p->data[5], 3u, 0x08u);
    dst_p->bms_hardware_error_lcm_general_failr = unpack_right_shift_u8(msg_p->data[5], 2u, 0x04u);
    dst_p->bms_h_vlink_error_hv_interlock_bad_sig_integr = unpack_right_shift_u8(msg_p->data[5], 1u, 0x02u);
    dst_p->bms_h_vlink_error_contactor_welded = unpack_right_shift_u8(msg_p->data[5], 0u, 0x01u);
    dst_p->bms_error_active_hv_under_voltage = unpack_right_shift_u8(msg_p->data[6], 7u, 0x80u);
    dst_p->bms_error_warning_hv_under_voltage = unpack_right_shift_u8(msg_p->data[6], 6u, 0x40u);
    dst_p->bms_error_active_hv_over_voltage = unpack_right_shift_u8(msg_p->data[6], 5u, 0x20u);
    dst_p->bms_error_warning_hv_over_voltage = unpack_right_shift_u8(msg_p->data[6], 4u, 0x10u);
    dst_p->bms_error_active_cell_temp_low = unpack_right_shift_u8(msg_p->data[6], 3u, 0x08u);
    dst_p->bms_error_warning_cell_temp_low = unpack_right_shift_u8(msg_p->data[6], 2u, 0x04u);
    dst_p->bms_error_active_cell_temp_high = unpack_right_shift_u8(msg_p->data[6], 1u, 0x02u);
    dst_p->bms_error_warning_cell_temp_high = unpack_right_shift_u8(msg_p->data[6], 0u, 0x01u);
    dst_p->bms_pviu_ca_ncomm_error = unpack_right_shift_u8(msg_p->data[7], 0u, 0x01u);

    return (0);
}

int fm29_dbc_bms_hv_batt_status_errors_1_init(struct fm29_dbc_bms_hv_batt_status_errors_1_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_hv_batt_status_errors_1_t));
    msg_p->bms_error_active_over_discharge_current = 0;
    msg_p->bms_error_warning_over_discharge_current = 0;
    msg_p->bms_error_active_over_charge_current = 0;
    msg_p->bms_error_warning_over_charge_current = 0;
    msg_p->bms_error_active_iso_crit = 0;
    msg_p->bms_error_warning_iso = 0;
    msg_p->bms_error_active_soc_low = 0;
    msg_p->bms_error_warning_soc_low = 0;
    msg_p->bms_error_active_discharge_power_limit_hit = 0;
    msg_p->bms_error_warning_discharge_power_limit_hit = 0;
    msg_p->bms_error_active_charge_power_limit_hit = 0;
    msg_p->bms_error_warning_charge_power_limit_hit = 0;
    msg_p->bms_system_error_ommission_of_kl15 = 0;
    msg_p->bms_system_error_kl30_c = 0;
    msg_p->bms_error_active_serv_state = 0;
    msg_p->bms_error_warning_overcurrent_prewarn = 0;
    msg_p->bms_error_active_abs_discharge_power_lim_hit = 0;
    msg_p->bms_error_active_abs_charge_power_lim = 0;
    msg_p->bms_error_active_abs_discharge_current_limit_h = 0;
    msg_p->bms_error_active_abs_charge_current_lim = 0;
    msg_p->bms_h_vlink_error_iso_dig_sig = 0;
    msg_p->bms_h_vlink_error_iso_dev = 0;
    msg_p->bms_h_vlink_error_vcu_comm_failure = 0;
    msg_p->bms_comm_error_pec_high = 0;
    msg_p->bms_comm_warning_pec_high = 0;
    msg_p->bms_comm_error_comm_failure = 0;
    msg_p->bms_system_error_hv_fuse = 0;
    msg_p->bms_system_error_hv_interlock = 0;
    msg_p->bms_error_active_cell_under_voltage = 0;
    msg_p->bms_error_warning_cell_under_voltage = 0;
    msg_p->bms_error_active_cell_over_voltage = 0;
    msg_p->bms_error_warning_cell_over_voltage = 0;
    msg_p->bms_software_error_general_failr = 0;
    msg_p->bms_hardware_error_lcm_general_failr = 0;
    msg_p->bms_h_vlink_error_hv_interlock_bad_sig_integr = 0;
    msg_p->bms_h_vlink_error_contactor_welded = 0;
    msg_p->bms_error_active_hv_under_voltage = 0;
    msg_p->bms_error_warning_hv_under_voltage = 0;
    msg_p->bms_error_active_hv_over_voltage = 0;
    msg_p->bms_error_warning_hv_over_voltage = 0;
    msg_p->bms_error_active_cell_temp_low = 0;
    msg_p->bms_error_warning_cell_temp_low = 0;
    msg_p->bms_error_active_cell_temp_high = 0;
    msg_p->bms_error_warning_cell_temp_high = 0;
    msg_p->bms_pviu_ca_ncomm_error = 0;

    return 0;
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_critical_error_flg_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_critical_error_flg_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_critical_error_flg_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_over_discharge_current_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_over_discharge_current_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_over_discharge_current_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_over_discharge_current_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_over_discharge_current_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_over_discharge_current_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_over_charge_current_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_over_charge_current_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_over_charge_current_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_over_charge_current_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_over_charge_current_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_over_charge_current_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_critical_error_flg_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_critical_error_flg_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_critical_error_flg_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_iso_crit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_iso_crit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_iso_crit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_iso_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_iso_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_iso_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_soc_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_soc_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_soc_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_soc_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_soc_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_soc_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_discharge_power_limit_hit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_discharge_power_limit_hit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_discharge_power_limit_hit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_discharge_power_limit_hit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_discharge_power_limit_hit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_discharge_power_limit_hit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_charge_power_limit_hit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_charge_power_limit_hit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_charge_power_limit_hit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_charge_power_limit_hit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_charge_power_limit_hit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_charge_power_limit_hit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_ommission_of_kl15_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_ommission_of_kl15_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_ommission_of_kl15_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_kl30_c_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_kl30_c_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_kl30_c_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_serv_state_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_serv_state_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_serv_state_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_overcurrent_prewarn_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_overcurrent_prewarn_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_overcurrent_prewarn_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_discharge_power_lim_hit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_discharge_power_lim_hit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_discharge_power_lim_hit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_charge_power_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_charge_power_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_charge_power_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_discharge_current_limit_h_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_discharge_current_limit_h_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_discharge_current_limit_h_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_charge_current_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_charge_current_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_abs_charge_current_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_iso_dig_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_iso_dig_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_iso_dig_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_iso_dev_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_iso_dev_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_iso_dev_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_vcu_comm_failure_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_vcu_comm_failure_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_vcu_comm_failure_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_error_pec_high_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_error_pec_high_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_error_pec_high_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_warning_pec_high_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_warning_pec_high_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_warning_pec_high_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_error_comm_failure_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_error_comm_failure_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_comm_error_comm_failure_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_hv_fuse_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_hv_fuse_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_hv_fuse_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_hv_interlock_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_hv_interlock_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_system_error_hv_interlock_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_under_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_under_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_under_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_under_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_under_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_under_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_over_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_over_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_over_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_over_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_over_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_over_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_software_error_general_failr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_software_error_general_failr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_software_error_general_failr_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_hardware_error_lcm_general_failr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_hardware_error_lcm_general_failr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_hardware_error_lcm_general_failr_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_hv_interlock_bad_sig_integr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_hv_interlock_bad_sig_integr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_hv_interlock_bad_sig_integr_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_contactor_welded_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_contactor_welded_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_h_vlink_error_contactor_welded_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_hv_under_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_hv_under_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_hv_under_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_hv_under_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_hv_under_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_hv_under_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_hv_over_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_hv_over_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_hv_over_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_hv_over_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_hv_over_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_hv_over_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_temp_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_temp_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_temp_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_temp_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_temp_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_temp_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_temp_high_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_temp_high_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_active_cell_temp_high_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_temp_high_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_temp_high_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_error_warning_cell_temp_high_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_1_bms_pviu_ca_ncomm_error_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_1_bms_pviu_ca_ncomm_error_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_1_bms_pviu_ca_ncomm_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int fm29_dbc_bms_hv_batt_status_overall_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_hv_batt_status_overall_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0xedu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_overall_status_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_overall_status_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_ballancing_status, 4u, 0xf0u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_operation_states, 0u, 0x0fu);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat7, 7u, 0x80u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat6, 6u, 0x40u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat5, 5u, 0x20u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat4, 4u, 0x10u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat3, 3u, 0x08u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat2, 2u, 0x04u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat1, 1u, 0x02u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_error_category_cat0, 0u, 0x01u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_cl30_c_sts, 7u, 0x80u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_sdil_sts, 6u, 0x40u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_battery_general_status_ok, 5u, 0x20u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_measurement_modules_ok, 4u, 0x10u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_configuration_status_ok, 3u, 0x08u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_error_category_mem_empty, 2u, 0x04u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_hardware_status_ok, 1u, 0x02u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_error_category_cat8, 0u, 0x01u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_isolatoin_status_ok, 5u, 0x20u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_current_sensor_ok, 4u, 0x10u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_sw_status_ok, 3u, 0x08u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_hv_contactors_status_ok, 2u, 0x04u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_hvil_ok, 1u, 0x02u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_cl15_sts, 0u, 0x01u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_state_m_achine_status, 0u, 0xffu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_bdu_status, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_hv_batt_status_overall_unpack(
    struct fm29_dbc_bms_hv_batt_status_overall_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0xedu)) {
        return (-EINVAL);
    }

    dst_p->bms_overall_status_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_overall_status_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_ballancing_status = unpack_right_shift_u8(msg_p->data[2], 4u, 0xf0u);
    dst_p->bms_operation_states = unpack_right_shift_u8(msg_p->data[2], 0u, 0x0fu);
    dst_p->bms_error_category_cat7 = unpack_right_shift_u8(msg_p->data[3], 7u, 0x80u);
    dst_p->bms_error_category_cat6 = unpack_right_shift_u8(msg_p->data[3], 6u, 0x40u);
    dst_p->bms_error_category_cat5 = unpack_right_shift_u8(msg_p->data[3], 5u, 0x20u);
    dst_p->bms_error_category_cat4 = unpack_right_shift_u8(msg_p->data[3], 4u, 0x10u);
    dst_p->bms_error_category_cat3 = unpack_right_shift_u8(msg_p->data[3], 3u, 0x08u);
    dst_p->bms_error_category_cat2 = unpack_right_shift_u8(msg_p->data[3], 2u, 0x04u);
    dst_p->bms_error_category_cat1 = unpack_right_shift_u8(msg_p->data[3], 1u, 0x02u);
    dst_p->bms_error_category_cat0 = unpack_right_shift_u8(msg_p->data[3], 0u, 0x01u);
    dst_p->bms_cl30_c_sts = unpack_right_shift_u8(msg_p->data[4], 7u, 0x80u);
    dst_p->bms_sdil_sts = unpack_right_shift_u8(msg_p->data[4], 6u, 0x40u);
    dst_p->bms_battery_general_status_ok = unpack_right_shift_u8(msg_p->data[4], 5u, 0x20u);
    dst_p->bms_measurement_modules_ok = unpack_right_shift_u8(msg_p->data[4], 4u, 0x10u);
    dst_p->bms_configuration_status_ok = unpack_right_shift_u8(msg_p->data[4], 3u, 0x08u);
    dst_p->bms_error_category_mem_empty = unpack_right_shift_u8(msg_p->data[4], 2u, 0x04u);
    dst_p->bms_hardware_status_ok = unpack_right_shift_u8(msg_p->data[4], 1u, 0x02u);
    dst_p->bms_error_category_cat8 = unpack_right_shift_u8(msg_p->data[4], 0u, 0x01u);
    dst_p->bms_isolatoin_status_ok = unpack_right_shift_u8(msg_p->data[5], 5u, 0x20u);
    dst_p->bms_current_sensor_ok = unpack_right_shift_u8(msg_p->data[5], 4u, 0x10u);
    dst_p->bms_sw_status_ok = unpack_right_shift_u8(msg_p->data[5], 3u, 0x08u);
    dst_p->bms_hv_contactors_status_ok = unpack_right_shift_u8(msg_p->data[5], 2u, 0x04u);
    dst_p->bms_hvil_ok = unpack_right_shift_u8(msg_p->data[5], 1u, 0x02u);
    dst_p->bms_cl15_sts = unpack_right_shift_u8(msg_p->data[5], 0u, 0x01u);
    dst_p->bms_state_m_achine_status = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);
    dst_p->bms_bdu_status = unpack_right_shift_u8(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_hv_batt_status_overall_init(struct fm29_dbc_bms_hv_batt_status_overall_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_hv_batt_status_overall_t));
    msg_p->bms_ballancing_status = 0;
    msg_p->bms_operation_states = 0;
    msg_p->bms_error_category_cat7 = 0;
    msg_p->bms_error_category_cat6 = 0;
    msg_p->bms_error_category_cat5 = 0;
    msg_p->bms_error_category_cat4 = 0;
    msg_p->bms_error_category_cat3 = 0;
    msg_p->bms_error_category_cat2 = 0;
    msg_p->bms_error_category_cat1 = 0;
    msg_p->bms_error_category_cat0 = 0;
    msg_p->bms_cl30_c_sts = 0;
    msg_p->bms_sdil_sts = 0;
    msg_p->bms_battery_general_status_ok = 0;
    msg_p->bms_measurement_modules_ok = 0;
    msg_p->bms_configuration_status_ok = 0;
    msg_p->bms_error_category_mem_empty = 0;
    msg_p->bms_hardware_status_ok = 0;
    msg_p->bms_error_category_cat8 = 0;
    msg_p->bms_isolatoin_status_ok = 0;
    msg_p->bms_current_sensor_ok = 0;
    msg_p->bms_sw_status_ok = 0;
    msg_p->bms_hv_contactors_status_ok = 0;
    msg_p->bms_hvil_ok = 0;
    msg_p->bms_cl15_sts = 0;

    return 0;
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_overall_status_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_overall_status_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_overall_status_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_overall_status_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_overall_status_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_overall_status_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_ballancing_status_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_ballancing_status_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_ballancing_status_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_operation_states_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_operation_states_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_operation_states_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat7_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat7_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat7_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat6_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat6_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat6_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat5_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat5_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat5_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat4_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat4_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat4_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat3_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat3_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat3_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat2_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat0_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_cl30_c_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_cl30_c_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_cl30_c_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_sdil_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_sdil_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_sdil_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_battery_general_status_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_battery_general_status_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_battery_general_status_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_measurement_modules_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_measurement_modules_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_measurement_modules_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_configuration_status_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_configuration_status_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_configuration_status_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_mem_empty_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_mem_empty_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_mem_empty_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_hardware_status_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_hardware_status_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_hardware_status_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat8_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat8_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_error_category_cat8_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_isolatoin_status_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_isolatoin_status_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_isolatoin_status_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_current_sensor_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_current_sensor_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_current_sensor_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_sw_status_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_sw_status_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_sw_status_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_hv_contactors_status_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_hv_contactors_status_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_hv_contactors_status_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_hvil_ok_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_hvil_ok_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_hvil_ok_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_cl15_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_cl15_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_cl15_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_state_m_achine_status_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_state_m_achine_status_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_state_m_achine_status_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_overall_bms_bdu_status_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_overall_bms_bdu_status_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_overall_bms_bdu_status_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_pst_voltage_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_pst_voltage_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0xeeu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_volt_pst_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_volt_pst_alive_counter, 0u, 0x0fu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_bat_d_ma_xvolt_pst, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_bat_d_ma_xvolt_pst, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_c_ma_xvolt_ps, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_c_ma_xvolt_ps, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_pst_voltage_unpack(
    struct fm29_dbc_bms_pst_voltage_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0xeeu)) {
        return (-EINVAL);
    }

    dst_p->bms_volt_pst_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_volt_pst_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_bat_d_ma_xvolt_pst = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_bat_d_ma_xvolt_pst |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_c_ma_xvolt_ps = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_c_ma_xvolt_ps |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_pst_voltage_init(struct fm29_dbc_bms_pst_voltage_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_pst_voltage_t));

    return 0;
}

uint8_t fm29_dbc_bms_pst_voltage_bms_volt_pst_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pst_voltage_bms_volt_pst_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pst_voltage_bms_volt_pst_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_pst_voltage_bms_volt_pst_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pst_voltage_bms_volt_pst_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pst_voltage_bms_volt_pst_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_bms_pst_voltage_bms_bat_d_ma_xvolt_pst_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_pst_voltage_bms_bat_d_ma_xvolt_pst_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_pst_voltage_bms_bat_d_ma_xvolt_pst_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_pst_voltage_bms_bat_c_ma_xvolt_ps_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_pst_voltage_bms_bat_c_ma_xvolt_ps_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_pst_voltage_bms_bat_c_ma_xvolt_ps_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_cell_voltage_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_cell_voltage_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0xf2u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_right_shift_u16(src_p->bms_cell_volt_max, 8u, 0xffu);
    msg.data[1] |= pack_left_shift_u16(src_p->bms_cell_volt_max, 0u, 0xffu);
    msg.data[2] |= pack_right_shift_u16(src_p->bms_cell_volt_min, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->bms_cell_volt_min, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_cell_volt_nom, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_cell_volt_nom, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_cl30_c_volt, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_cl30_c_volt, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_cell_voltage_unpack(
    struct fm29_dbc_bms_cell_voltage_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0xf2u)) {
        return (-EINVAL);
    }

    dst_p->bms_cell_volt_max = unpack_left_shift_u16(msg_p->data[0], 8u, 0xffu);
    dst_p->bms_cell_volt_max |= unpack_right_shift_u16(msg_p->data[1], 0u, 0xffu);
    dst_p->bms_cell_volt_min = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->bms_cell_volt_min |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->bms_cell_volt_nom = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_cell_volt_nom |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_cl30_c_volt = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_cl30_c_volt |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_cell_voltage_init(struct fm29_dbc_bms_cell_voltage_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_cell_voltage_t));

    return 0;
}

uint16_t fm29_dbc_bms_cell_voltage_bms_cell_volt_max_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_bms_cell_voltage_bms_cell_volt_max_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_bms_cell_voltage_bms_cell_volt_max_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_cell_voltage_bms_cell_volt_min_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_bms_cell_voltage_bms_cell_volt_min_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_bms_cell_voltage_bms_cell_volt_min_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_cell_voltage_bms_cell_volt_nom_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_bms_cell_voltage_bms_cell_volt_nom_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_bms_cell_voltage_bms_cell_volt_nom_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_cell_voltage_bms_cl30_c_volt_encode(double value)
{
    return (uint16_t)(value / 0.001);
}

double fm29_dbc_bms_cell_voltage_bms_cl30_c_volt_decode(uint16_t value)
{
    return ((double)value * 0.001);
}

bool fm29_dbc_bms_cell_voltage_bms_cl30_c_volt_is_in_range(uint16_t value)
{
    return (value <= 65534u);
}

int fm29_dbc_mcu_f_0x150_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_mcu_f_0x150_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x150u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->mcu_f_150_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->mcu_f_crt_rot_dir, 6u, 0xc0u);
    msg.data[1] |= pack_left_shift_u8(src_p->mcu_f_crt_tq_vld, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->mcu_f_150_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_right_shift_u16(src_p->mcu_f_crt_spd, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->mcu_f_crt_spd, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->mcu_f_crt_spd_sig_vld, 5u, 0x60u);
    msg.data[4] |= pack_right_shift_u16(src_p->mcu_f_crt_tq, 6u, 0x1fu);
    msg.data[5] |= pack_left_shift_u16(src_p->mcu_f_crt_tq, 2u, 0xfcu);
    msg.data[6] |= pack_left_shift_u8(src_p->mcu_f_crt_mod, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_f_hv_chk_end_flg, 7u, 0x80u);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_f_alrm_lamp_fs, 5u, 0x20u);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_f_slip_ctrl_act_mode, 3u, 0x18u);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_f_hv_actv_dcha_sts, 0u, 0x07u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_mcu_f_0x150_unpack(
    struct fm29_dbc_mcu_f_0x150_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x150u)) {
        return (-EINVAL);
    }

    dst_p->mcu_f_150_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->mcu_f_crt_rot_dir = unpack_right_shift_u8(msg_p->data[1], 6u, 0xc0u);
    dst_p->mcu_f_crt_tq_vld = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->mcu_f_150_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->mcu_f_crt_spd = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->mcu_f_crt_spd |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->mcu_f_crt_spd_sig_vld = unpack_right_shift_u8(msg_p->data[4], 5u, 0x60u);
    dst_p->mcu_f_crt_tq = unpack_left_shift_u16(msg_p->data[4], 6u, 0x1fu);
    dst_p->mcu_f_crt_tq |= unpack_right_shift_u16(msg_p->data[5], 2u, 0xfcu);
    dst_p->mcu_f_crt_mod = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->mcu_f_hv_chk_end_flg = unpack_right_shift_u8(msg_p->data[7], 7u, 0x80u);
    dst_p->mcu_f_alrm_lamp_fs = unpack_right_shift_u8(msg_p->data[7], 5u, 0x20u);
    dst_p->mcu_f_slip_ctrl_act_mode = unpack_right_shift_u8(msg_p->data[7], 3u, 0x18u);
    dst_p->mcu_f_hv_actv_dcha_sts = unpack_right_shift_u8(msg_p->data[7], 0u, 0x07u);

    return (0);
}

int fm29_dbc_mcu_f_0x150_init(struct fm29_dbc_mcu_f_0x150_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_mcu_f_0x150_t));
    msg_p->mcu_f_crt_rot_dir = 0;
    msg_p->mcu_f_crt_tq_vld = 0;
    msg_p->mcu_f_crt_spd_sig_vld = 0;
    msg_p->mcu_f_crt_mod = 14;
    msg_p->mcu_f_hv_chk_end_flg = 0;
    msg_p->mcu_f_alrm_lamp_fs = 0;
    msg_p->mcu_f_slip_ctrl_act_mode = 0;
    msg_p->mcu_f_hv_actv_dcha_sts = 6;

    return 0;
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_150_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_150_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_150_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_crt_rot_dir_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_crt_rot_dir_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_crt_rot_dir_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_crt_tq_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_crt_tq_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_crt_tq_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_150_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_150_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_150_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_mcu_f_0x150_mcu_f_crt_spd_encode(double value)
{
    return (uint16_t)(value - -32768.0);
}

double fm29_dbc_mcu_f_0x150_mcu_f_crt_spd_decode(uint16_t value)
{
    return ((double)value + -32768.0);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_crt_spd_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_crt_spd_sig_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_crt_spd_sig_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_crt_spd_sig_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint16_t fm29_dbc_mcu_f_0x150_mcu_f_crt_tq_encode(double value)
{
    return (uint16_t)((value - -511.0) / 0.5);
}

double fm29_dbc_mcu_f_0x150_mcu_f_crt_tq_decode(uint16_t value)
{
    return (((double)value * 0.5) + -511.0);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_crt_tq_is_in_range(uint16_t value)
{
    return (value <= 2046u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_crt_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_crt_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_crt_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_hv_chk_end_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_hv_chk_end_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_hv_chk_end_flg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_alrm_lamp_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_alrm_lamp_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_alrm_lamp_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_slip_ctrl_act_mode_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_slip_ctrl_act_mode_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_slip_ctrl_act_mode_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_mcu_f_0x150_mcu_f_hv_actv_dcha_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_f_0x150_mcu_f_hv_actv_dcha_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_f_0x150_mcu_f_hv_actv_dcha_sts_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int fm29_dbc_mcu_r_0x151_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_mcu_r_0x151_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x151u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->mcu_r_151_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->mcu_r_crt_rot_dir, 6u, 0xc0u);
    msg.data[1] |= pack_left_shift_u8(src_p->mcu_r_crt_tq_vld, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->mcu_r_151_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_right_shift_u16(src_p->mcu_r_crt_spd, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->mcu_r_crt_spd, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->mcu_r_crt_spd_sig_vld, 5u, 0x60u);
    msg.data[4] |= pack_right_shift_u16(src_p->mcu_r_crt_tq, 6u, 0x1fu);
    msg.data[5] |= pack_left_shift_u16(src_p->mcu_r_crt_tq, 2u, 0xfcu);
    msg.data[6] |= pack_left_shift_u8(src_p->mcu_r_decoup_state, 4u, 0xf0u);
    msg.data[6] |= pack_left_shift_u8(src_p->mcu_r_crt_mod, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_r_hv_chk_end_flg, 7u, 0x80u);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_r_alrm_lamp_fs, 5u, 0x20u);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_r_slip_ctrl_act_mode, 3u, 0x18u);
    msg.data[7] |= pack_left_shift_u8(src_p->mcu_r_hv_actv_dcha_sts, 0u, 0x07u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_mcu_r_0x151_unpack(
    struct fm29_dbc_mcu_r_0x151_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x151u)) {
        return (-EINVAL);
    }

    dst_p->mcu_r_151_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->mcu_r_crt_rot_dir = unpack_right_shift_u8(msg_p->data[1], 6u, 0xc0u);
    dst_p->mcu_r_crt_tq_vld = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->mcu_r_151_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->mcu_r_crt_spd = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->mcu_r_crt_spd |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->mcu_r_crt_spd_sig_vld = unpack_right_shift_u8(msg_p->data[4], 5u, 0x60u);
    dst_p->mcu_r_crt_tq = unpack_left_shift_u16(msg_p->data[4], 6u, 0x1fu);
    dst_p->mcu_r_crt_tq |= unpack_right_shift_u16(msg_p->data[5], 2u, 0xfcu);
    dst_p->mcu_r_decoup_state = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->mcu_r_crt_mod = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->mcu_r_hv_chk_end_flg = unpack_right_shift_u8(msg_p->data[7], 7u, 0x80u);
    dst_p->mcu_r_alrm_lamp_fs = unpack_right_shift_u8(msg_p->data[7], 5u, 0x20u);
    dst_p->mcu_r_slip_ctrl_act_mode = unpack_right_shift_u8(msg_p->data[7], 3u, 0x18u);
    dst_p->mcu_r_hv_actv_dcha_sts = unpack_right_shift_u8(msg_p->data[7], 0u, 0x07u);

    return (0);
}

int fm29_dbc_mcu_r_0x151_init(struct fm29_dbc_mcu_r_0x151_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_mcu_r_0x151_t));
    msg_p->mcu_r_crt_rot_dir = 0;
    msg_p->mcu_r_crt_tq_vld = 0;
    msg_p->mcu_r_crt_spd_sig_vld = 0;
    msg_p->mcu_r_decoup_state = 0;
    msg_p->mcu_r_crt_mod = 14;
    msg_p->mcu_r_hv_chk_end_flg = 0;
    msg_p->mcu_r_alrm_lamp_fs = 0;
    msg_p->mcu_r_slip_ctrl_act_mode = 0;
    msg_p->mcu_r_hv_actv_dcha_sts = 6;

    return 0;
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_151_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_151_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_151_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_crt_rot_dir_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_crt_rot_dir_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_crt_rot_dir_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_crt_tq_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_crt_tq_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_crt_tq_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_151_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_151_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_151_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_mcu_r_0x151_mcu_r_crt_spd_encode(double value)
{
    return (uint16_t)(value - -32768.0);
}

double fm29_dbc_mcu_r_0x151_mcu_r_crt_spd_decode(uint16_t value)
{
    return ((double)value + -32768.0);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_crt_spd_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_crt_spd_sig_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_crt_spd_sig_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_crt_spd_sig_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint16_t fm29_dbc_mcu_r_0x151_mcu_r_crt_tq_encode(double value)
{
    return (uint16_t)((value - -511.0) / 0.5);
}

double fm29_dbc_mcu_r_0x151_mcu_r_crt_tq_decode(uint16_t value)
{
    return (((double)value * 0.5) + -511.0);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_crt_tq_is_in_range(uint16_t value)
{
    return (value <= 2046u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_decoup_state_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_decoup_state_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_decoup_state_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_crt_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_crt_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_crt_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_hv_chk_end_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_hv_chk_end_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_hv_chk_end_flg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_alrm_lamp_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_alrm_lamp_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_alrm_lamp_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_slip_ctrl_act_mode_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_slip_ctrl_act_mode_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_slip_ctrl_act_mode_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_mcu_r_0x151_mcu_r_hv_actv_dcha_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_mcu_r_0x151_mcu_r_hv_actv_dcha_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_mcu_r_0x151_mcu_r_hv_actv_dcha_sts_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int fm29_dbc_bms_hv_batt_status_1_tbox_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_hv_batt_status_1_tbox_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x215u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_215_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_215_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_cell_over_volt_fs, 5u, 0x20u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_cell_underr_volt_flt_fs, 4u, 0x10u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_pos_rly_adh_fs, 3u, 0x08u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_neg_rly_adh_fs, 2u, 0x04u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_over_crt_flt_fs, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_over_t_flt_fs, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_alrm_lamp_fs, 4u, 0x10u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_pwr_batt_prec_rly_adh_fs, 3u, 0x08u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_batt_outl_t_snsr_flt, 2u, 0x04u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_batt_inl_t_snsr_flt, 1u, 0x02u);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_pwr_batt_load_tot_volt_v3_fs, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_pwr_batt_load_tot_volt_v3_fs, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_fct_sfty_err_cod, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_hv_batt_status_1_tbox_unpack(
    struct fm29_dbc_bms_hv_batt_status_1_tbox_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x215u)) {
        return (-EINVAL);
    }

    dst_p->bms_215_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_215_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_pwr_batt_cell_over_volt_fs = unpack_right_shift_u8(msg_p->data[2], 5u, 0x20u);
    dst_p->bms_cell_underr_volt_flt_fs = unpack_right_shift_u8(msg_p->data[2], 4u, 0x10u);
    dst_p->bms_pwr_batt_pos_rly_adh_fs = unpack_right_shift_u8(msg_p->data[2], 3u, 0x08u);
    dst_p->bms_pwr_batt_neg_rly_adh_fs = unpack_right_shift_u8(msg_p->data[2], 2u, 0x04u);
    dst_p->bms_pwr_batt_over_crt_flt_fs = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->bms_pwr_batt_over_t_flt_fs = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->bms_alrm_lamp_fs = unpack_right_shift_u8(msg_p->data[3], 4u, 0x10u);
    dst_p->bms_pwr_batt_prec_rly_adh_fs = unpack_right_shift_u8(msg_p->data[3], 3u, 0x08u);
    dst_p->bms_batt_outl_t_snsr_flt = unpack_right_shift_u8(msg_p->data[3], 2u, 0x04u);
    dst_p->bms_batt_inl_t_snsr_flt = unpack_right_shift_u8(msg_p->data[3], 1u, 0x02u);
    dst_p->bms_pwr_batt_load_tot_volt_v3_fs = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_pwr_batt_load_tot_volt_v3_fs |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_fct_sfty_err_cod = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_hv_batt_status_1_tbox_init(struct fm29_dbc_bms_hv_batt_status_1_tbox_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_hv_batt_status_1_tbox_t));
    msg_p->bms_pwr_batt_cell_over_volt_fs = 0;
    msg_p->bms_cell_underr_volt_flt_fs = 0;
    msg_p->bms_pwr_batt_pos_rly_adh_fs = 0;
    msg_p->bms_pwr_batt_neg_rly_adh_fs = 0;
    msg_p->bms_pwr_batt_over_crt_flt_fs = 0;
    msg_p->bms_pwr_batt_over_t_flt_fs = 0;
    msg_p->bms_alrm_lamp_fs = 0;
    msg_p->bms_pwr_batt_prec_rly_adh_fs = 0;
    msg_p->bms_batt_outl_t_snsr_flt = 0;
    msg_p->bms_batt_inl_t_snsr_flt = 0;
    msg_p->bms_fct_sfty_err_cod = 0;

    return 0;
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_215_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_215_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_215_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_215_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_215_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_215_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_cell_over_volt_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_cell_over_volt_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_cell_over_volt_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_cell_underr_volt_flt_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_cell_underr_volt_flt_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_cell_underr_volt_flt_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_pos_rly_adh_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_pos_rly_adh_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_pos_rly_adh_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_neg_rly_adh_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_neg_rly_adh_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_neg_rly_adh_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_over_crt_flt_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_over_crt_flt_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_over_crt_flt_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_over_t_flt_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_over_t_flt_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_over_t_flt_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_alrm_lamp_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_alrm_lamp_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_alrm_lamp_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_prec_rly_adh_fs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_prec_rly_adh_fs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_prec_rly_adh_fs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_batt_outl_t_snsr_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_batt_outl_t_snsr_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_batt_outl_t_snsr_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_batt_inl_t_snsr_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_batt_inl_t_snsr_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_batt_inl_t_snsr_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_load_tot_volt_v3_fs_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_load_tot_volt_v3_fs_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_pwr_batt_load_tot_volt_v3_fs_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_1_tbox_bms_fct_sfty_err_cod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_1_tbox_bms_fct_sfty_err_cod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_1_tbox_bms_fct_sfty_err_cod_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_vcu_0x260_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_vcu_0x260_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x260u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 10u;

    msg.data[0] |= pack_left_shift_u8(src_p->vcu_260_269_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_260_269_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_right_shift_u16(src_p->vcu_dc_volt_cmd_obc, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->vcu_dc_volt_cmd_obc, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->vcu_dc_crt_cmd_obc, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->vcu_dc_crt_cmd_obc, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->vcu_dc_rly_ctrl_cmd, 3u, 0x08u);
    msg.data[6] |= pack_left_shift_u8(src_p->vcu_veh_chrg_dchg_mod, 0u, 0x07u);
    msg.data[7] |= pack_left_shift_u8(src_p->vcu_chrg_sts, 5u, 0xe0u);
    msg.data[7] |= pack_left_shift_u8(src_p->vcu_chrg_sys_oper_cmd, 0u, 0x07u);
    msg.data[8] |= pack_left_shift_u8(src_p->vcu_260_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[9] |= pack_left_shift_u8(src_p->vcu_260_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[10] |= pack_left_shift_u8(src_p->vcu_260_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[11] |= pack_left_shift_u8(src_p->vcu_260_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (16);
}

int fm29_dbc_vcu_0x260_unpack(
    struct fm29_dbc_vcu_0x260_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 10u) || (msg_p->id != 0x260u)) {
        return (-EINVAL);
    }

    dst_p->vcu_260_269_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->vcu_260_269_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->vcu_dc_volt_cmd_obc = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->vcu_dc_volt_cmd_obc |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->vcu_dc_crt_cmd_obc = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->vcu_dc_crt_cmd_obc |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->vcu_dc_rly_ctrl_cmd = unpack_right_shift_u8(msg_p->data[6], 3u, 0x08u);
    dst_p->vcu_veh_chrg_dchg_mod = unpack_right_shift_u8(msg_p->data[6], 0u, 0x07u);
    dst_p->vcu_chrg_sts = unpack_right_shift_u8(msg_p->data[7], 5u, 0xe0u);
    dst_p->vcu_chrg_sys_oper_cmd = unpack_right_shift_u8(msg_p->data[7], 0u, 0x07u);
    dst_p->vcu_260_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[8], 0u, 0xffu);
    dst_p->vcu_260_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[9], 0u, 0xffu);
    dst_p->vcu_260_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[10], 0u, 0xffu);
    dst_p->vcu_260_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[11], 0u, 0xffu);

    return (0);
}

int fm29_dbc_vcu_0x260_init(struct fm29_dbc_vcu_0x260_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_vcu_0x260_t));
    msg_p->vcu_dc_rly_ctrl_cmd = 0;
    msg_p->vcu_veh_chrg_dchg_mod = 0;
    msg_p->vcu_chrg_sts = 0;
    msg_p->vcu_chrg_sys_oper_cmd = 0;

    return 0;
}

uint8_t fm29_dbc_vcu_0x260_vcu_260_269_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_260_269_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_260_269_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x260_vcu_260_269_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_260_269_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_260_269_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_vcu_0x260_vcu_dc_volt_cmd_obc_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_vcu_0x260_vcu_dc_volt_cmd_obc_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_vcu_0x260_vcu_dc_volt_cmd_obc_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_vcu_0x260_vcu_dc_crt_cmd_obc_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_vcu_0x260_vcu_dc_crt_cmd_obc_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_vcu_0x260_vcu_dc_crt_cmd_obc_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x260_vcu_dc_rly_ctrl_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_dc_rly_ctrl_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_dc_rly_ctrl_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x260_vcu_veh_chrg_dchg_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_veh_chrg_dchg_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_veh_chrg_dchg_mod_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x260_vcu_chrg_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_chrg_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_chrg_sts_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x260_vcu_chrg_sys_oper_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_chrg_sys_oper_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_chrg_sys_oper_cmd_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x260_vcu_260_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x273_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x273_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x273u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[2] |= pack_left_shift_u8(src_p->tbox_schedule_charg_start_hr, 3u, 0xf8u);
    msg.data[2] |= pack_right_shift_u8(src_p->tbox_schedule_charg_end_mins, 3u, 0x07u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_schedule_charg_end_mins, 5u, 0xe0u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_schedule_charg_end_hr, 0u, 0x1fu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_schedule_charg_start_mins, 2u, 0xfcu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_set_scedule_charg_time_fb, 0u, 0x03u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_v2_g_ena, 6u, 0x40u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_v2_h_ena, 5u, 0x20u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_v2_v_ena, 4u, 0x10u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_v2_l_chrg_port_ena, 3u, 0x08u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_v2_l_tr_ena, 2u, 0x04u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_schedule_charg_status, 0u, 0x03u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x273_unpack(
    struct fm29_dbc_tbox_0x273_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x273u)) {
        return (-EINVAL);
    }

    dst_p->tbox_schedule_charg_start_hr = unpack_right_shift_u8(msg_p->data[2], 3u, 0xf8u);
    dst_p->tbox_schedule_charg_end_mins = unpack_left_shift_u8(msg_p->data[2], 3u, 0x07u);
    dst_p->tbox_schedule_charg_end_mins |= unpack_right_shift_u8(msg_p->data[3], 5u, 0xe0u);
    dst_p->tbox_schedule_charg_end_hr = unpack_right_shift_u8(msg_p->data[3], 0u, 0x1fu);
    dst_p->tbox_schedule_charg_start_mins = unpack_right_shift_u8(msg_p->data[4], 2u, 0xfcu);
    dst_p->tbox_set_scedule_charg_time_fb = unpack_right_shift_u8(msg_p->data[4], 0u, 0x03u);
    dst_p->tbox_v2_g_ena = unpack_right_shift_u8(msg_p->data[5], 6u, 0x40u);
    dst_p->tbox_v2_h_ena = unpack_right_shift_u8(msg_p->data[5], 5u, 0x20u);
    dst_p->tbox_v2_v_ena = unpack_right_shift_u8(msg_p->data[5], 4u, 0x10u);
    dst_p->tbox_v2_l_chrg_port_ena = unpack_right_shift_u8(msg_p->data[5], 3u, 0x08u);
    dst_p->tbox_v2_l_tr_ena = unpack_right_shift_u8(msg_p->data[5], 2u, 0x04u);
    dst_p->tbox_schedule_charg_status = unpack_right_shift_u8(msg_p->data[5], 0u, 0x03u);

    return (0);
}

int fm29_dbc_tbox_0x273_init(struct fm29_dbc_tbox_0x273_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x273_t));
    msg_p->tbox_set_scedule_charg_time_fb = 0;
    msg_p->tbox_v2_g_ena = 0;
    msg_p->tbox_v2_h_ena = 0;
    msg_p->tbox_v2_v_ena = 0;
    msg_p->tbox_v2_l_chrg_port_ena = 0;
    msg_p->tbox_v2_l_tr_ena = 0;
    msg_p->tbox_schedule_charg_status = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x273_tbox_schedule_charg_start_hr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_schedule_charg_start_hr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_schedule_charg_start_hr_is_in_range(uint8_t value)
{
    return (value <= 23u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_schedule_charg_end_mins_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_schedule_charg_end_mins_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_schedule_charg_end_mins_is_in_range(uint8_t value)
{
    return (value <= 59u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_schedule_charg_end_hr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_schedule_charg_end_hr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_schedule_charg_end_hr_is_in_range(uint8_t value)
{
    return (value <= 23u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_schedule_charg_start_mins_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_schedule_charg_start_mins_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_schedule_charg_start_mins_is_in_range(uint8_t value)
{
    return (value <= 59u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_set_scedule_charg_time_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_set_scedule_charg_time_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_set_scedule_charg_time_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_v2_g_ena_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_v2_g_ena_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_v2_g_ena_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_v2_h_ena_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_v2_h_ena_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_v2_h_ena_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_v2_v_ena_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_v2_v_ena_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_v2_v_ena_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_v2_l_chrg_port_ena_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_v2_l_chrg_port_ena_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_v2_l_chrg_port_ena_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_v2_l_tr_ena_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_v2_l_tr_ena_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_v2_l_tr_ena_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x273_tbox_schedule_charg_status_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x273_tbox_schedule_charg_status_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x273_tbox_schedule_charg_status_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int fm29_dbc_bms_pmlt_voltage_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_pmlt_voltage_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x279u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_volt_pm_lt_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_volt_pm_lt_alive_counter, 0u, 0x0fu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_bat_d_ma_xvolt_pm_lt, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_bat_d_ma_xvolt_pm_lt, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_c_ma_xvolt_pm_lt, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_c_ma_xvolt_pm_lt, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_pmlt_voltage_unpack(
    struct fm29_dbc_bms_pmlt_voltage_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x279u)) {
        return (-EINVAL);
    }

    dst_p->bms_volt_pm_lt_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_volt_pm_lt_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_bat_d_ma_xvolt_pm_lt = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_bat_d_ma_xvolt_pm_lt |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_c_ma_xvolt_pm_lt = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_c_ma_xvolt_pm_lt |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_pmlt_voltage_init(struct fm29_dbc_bms_pmlt_voltage_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_pmlt_voltage_t));

    return 0;
}

uint8_t fm29_dbc_bms_pmlt_voltage_bms_volt_pm_lt_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pmlt_voltage_bms_volt_pm_lt_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pmlt_voltage_bms_volt_pm_lt_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_pmlt_voltage_bms_volt_pm_lt_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pmlt_voltage_bms_volt_pm_lt_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pmlt_voltage_bms_volt_pm_lt_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_bms_pmlt_voltage_bms_bat_d_ma_xvolt_pm_lt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_pmlt_voltage_bms_bat_d_ma_xvolt_pm_lt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_pmlt_voltage_bms_bat_d_ma_xvolt_pm_lt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_pmlt_voltage_bms_bat_c_ma_xvolt_pm_lt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_pmlt_voltage_bms_bat_c_ma_xvolt_pm_lt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_pmlt_voltage_bms_bat_c_ma_xvolt_pm_lt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_p_vcontactor_pos_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_p_vcontactor_pos_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2ecu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_target_state_pv_pos, 1u, 0x02u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_current_state_pv_pos, 0u, 0x01u);
    msg.data[1] |= pack_right_shift_u16(src_p->bms_cont_coil_i_pv_pos, 8u, 0xffu);
    msg.data[2] |= pack_left_shift_u16(src_p->bms_cont_coil_i_pv_pos, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_pv_pos, 24u, 0xffu);
    msg.data[5] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_pv_pos, 16u, 0xffu);
    msg.data[6] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_pv_pos, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u32(src_p->bms_cont_wear_counter_pv_pos, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_p_vcontactor_pos_status_unpack(
    struct fm29_dbc_bms_p_vcontactor_pos_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2ecu)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_target_state_pv_pos = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_current_state_pv_pos = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->bms_cont_coil_i_pv_pos = unpack_left_shift_u16(msg_p->data[1], 8u, 0xffu);
    dst_p->bms_cont_coil_i_pv_pos |= unpack_right_shift_u16(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_pos = unpack_left_shift_u32(msg_p->data[4], 24u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_pos |= unpack_left_shift_u32(msg_p->data[5], 16u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_pos |= unpack_left_shift_u32(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_pos |= unpack_right_shift_u32(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_p_vcontactor_pos_status_init(struct fm29_dbc_bms_p_vcontactor_pos_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_p_vcontactor_pos_status_t));
    msg_p->bms_cont_target_state_pv_pos = 0;
    msg_p->bms_cont_current_state_pv_pos = 0;

    return 0;
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_target_state_pv_pos_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_target_state_pv_pos_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_target_state_pv_pos_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_current_state_pv_pos_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_current_state_pv_pos_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_current_state_pv_pos_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_coil_i_pv_pos_encode(double value)
{
    return (uint16_t)(value / 0.08);
}

double fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_coil_i_pv_pos_decode(uint16_t value)
{
    return ((double)value * 0.08);
}

bool fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_coil_i_pv_pos_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint32_t fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_wear_counter_pv_pos_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_wear_counter_pv_pos_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_status_bms_cont_wear_counter_pv_pos_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_p_vcontactor_neg_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_p_vcontactor_neg_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2edu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_target_sgtate_pv_neg, 1u, 0x02u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_current_state_pv_neg, 0u, 0x01u);
    msg.data[1] |= pack_right_shift_u16(src_p->bms_cont_coil_i_pv_neg, 8u, 0xffu);
    msg.data[2] |= pack_left_shift_u16(src_p->bms_cont_coil_i_pv_neg, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_pv_neg, 24u, 0xffu);
    msg.data[5] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_pv_neg, 16u, 0xffu);
    msg.data[6] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_pv_neg, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u32(src_p->bms_cont_wear_counter_pv_neg, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_p_vcontactor_neg_status_unpack(
    struct fm29_dbc_bms_p_vcontactor_neg_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2edu)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_target_sgtate_pv_neg = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_current_state_pv_neg = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->bms_cont_coil_i_pv_neg = unpack_left_shift_u16(msg_p->data[1], 8u, 0xffu);
    dst_p->bms_cont_coil_i_pv_neg |= unpack_right_shift_u16(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_neg = unpack_left_shift_u32(msg_p->data[4], 24u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_neg |= unpack_left_shift_u32(msg_p->data[5], 16u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_neg |= unpack_left_shift_u32(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_cont_wear_counter_pv_neg |= unpack_right_shift_u32(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_p_vcontactor_neg_status_init(struct fm29_dbc_bms_p_vcontactor_neg_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_p_vcontactor_neg_status_t));
    msg_p->bms_cont_target_sgtate_pv_neg = 0;
    msg_p->bms_cont_current_state_pv_neg = 0;

    return 0;
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_target_sgtate_pv_neg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_target_sgtate_pv_neg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_target_sgtate_pv_neg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_current_state_pv_neg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_current_state_pv_neg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_current_state_pv_neg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_coil_i_pv_neg_encode(double value)
{
    return (uint16_t)(value / 0.08);
}

double fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_coil_i_pv_neg_decode(uint16_t value)
{
    return ((double)value * 0.08);
}

bool fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_coil_i_pv_neg_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint32_t fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_wear_counter_pv_neg_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_wear_counter_pv_neg_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_status_bms_cont_wear_counter_pv_neg_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_mai_ncontactor_pos_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_mai_ncontactor_pos_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2eeu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_tar_st_hv_pos, 1u, 0x02u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_act_st_hv_pos, 0u, 0x01u);
    msg.data[1] |= pack_right_shift_u16(src_p->bms_cont_coil_i_hv_pos, 8u, 0xffu);
    msg.data[2] |= pack_left_shift_u16(src_p->bms_cont_coil_i_hv_pos, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_pos, 24u, 0xffu);
    msg.data[5] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_pos, 16u, 0xffu);
    msg.data[6] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_pos, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u32(src_p->bms_cont_wear_counter_hv_pos, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_mai_ncontactor_pos_status_unpack(
    struct fm29_dbc_bms_mai_ncontactor_pos_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2eeu)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_tar_st_hv_pos = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_act_st_hv_pos = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->bms_cont_coil_i_hv_pos = unpack_left_shift_u16(msg_p->data[1], 8u, 0xffu);
    dst_p->bms_cont_coil_i_hv_pos |= unpack_right_shift_u16(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_pos = unpack_left_shift_u32(msg_p->data[4], 24u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_pos |= unpack_left_shift_u32(msg_p->data[5], 16u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_pos |= unpack_left_shift_u32(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_pos |= unpack_right_shift_u32(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_mai_ncontactor_pos_status_init(struct fm29_dbc_bms_mai_ncontactor_pos_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_mai_ncontactor_pos_status_t));
    msg_p->bms_cont_tar_st_hv_pos = 0;
    msg_p->bms_cont_act_st_hv_pos = 0;

    return 0;
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_tar_st_hv_pos_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_tar_st_hv_pos_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_tar_st_hv_pos_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_act_st_hv_pos_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_act_st_hv_pos_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_act_st_hv_pos_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_coil_i_hv_pos_encode(double value)
{
    return (uint16_t)(value / 0.08);
}

double fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_coil_i_hv_pos_decode(uint16_t value)
{
    return ((double)value * 0.08);
}

bool fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_coil_i_hv_pos_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint32_t fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_wear_counter_hv_pos_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_wear_counter_hv_pos_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_status_bms_cont_wear_counter_hv_pos_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_mai_ncontactor_neg_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_mai_ncontactor_neg_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2efu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_tar_st_hv_neg, 1u, 0x02u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_act_st_hv_neg, 0u, 0x01u);
    msg.data[1] |= pack_right_shift_u16(src_p->bms_cont_coil_i_hv_neg, 8u, 0xffu);
    msg.data[2] |= pack_left_shift_u16(src_p->bms_cont_coil_i_hv_neg, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_neg, 24u, 0xffu);
    msg.data[5] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_neg, 16u, 0xffu);
    msg.data[6] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_neg, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u32(src_p->bms_cont_wear_counter_hv_neg, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_mai_ncontactor_neg_status_unpack(
    struct fm29_dbc_bms_mai_ncontactor_neg_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2efu)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_tar_st_hv_neg = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_act_st_hv_neg = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->bms_cont_coil_i_hv_neg = unpack_left_shift_u16(msg_p->data[1], 8u, 0xffu);
    dst_p->bms_cont_coil_i_hv_neg |= unpack_right_shift_u16(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_neg = unpack_left_shift_u32(msg_p->data[4], 24u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_neg |= unpack_left_shift_u32(msg_p->data[5], 16u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_neg |= unpack_left_shift_u32(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_neg |= unpack_right_shift_u32(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_mai_ncontactor_neg_status_init(struct fm29_dbc_bms_mai_ncontactor_neg_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_mai_ncontactor_neg_status_t));
    msg_p->bms_cont_tar_st_hv_neg = 0;
    msg_p->bms_cont_act_st_hv_neg = 0;

    return 0;
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_tar_st_hv_neg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_tar_st_hv_neg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_tar_st_hv_neg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_act_st_hv_neg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_act_st_hv_neg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_act_st_hv_neg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_coil_i_hv_neg_encode(double value)
{
    return (uint16_t)(value / 0.08);
}

double fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_coil_i_hv_neg_decode(uint16_t value)
{
    return ((double)value * 0.08);
}

bool fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_coil_i_hv_neg_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint32_t fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_wear_counter_hv_neg_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_wear_counter_hv_neg_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_status_bms_cont_wear_counter_hv_neg_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_pre_charge_contactor_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_pre_charge_contactor_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2f0u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_tar_st_hv_prec, 1u, 0x02u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_act_st_hv_prec, 0u, 0x01u);
    msg.data[1] |= pack_right_shift_u16(src_p->bms_cont_coil_i_hv_prec, 8u, 0xffu);
    msg.data[2] |= pack_left_shift_u16(src_p->bms_cont_coil_i_hv_prec, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_prec, 24u, 0xffu);
    msg.data[5] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_prec, 16u, 0xffu);
    msg.data[6] |= pack_right_shift_u32(src_p->bms_cont_wear_counter_hv_prec, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u32(src_p->bms_cont_wear_counter_hv_prec, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_pre_charge_contactor_status_unpack(
    struct fm29_dbc_bms_pre_charge_contactor_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2f0u)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_tar_st_hv_prec = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_act_st_hv_prec = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->bms_cont_coil_i_hv_prec = unpack_left_shift_u16(msg_p->data[1], 8u, 0xffu);
    dst_p->bms_cont_coil_i_hv_prec |= unpack_right_shift_u16(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_prec = unpack_left_shift_u32(msg_p->data[4], 24u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_prec |= unpack_left_shift_u32(msg_p->data[5], 16u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_prec |= unpack_left_shift_u32(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_cont_wear_counter_hv_prec |= unpack_right_shift_u32(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_pre_charge_contactor_status_init(struct fm29_dbc_bms_pre_charge_contactor_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_pre_charge_contactor_status_t));
    msg_p->bms_cont_tar_st_hv_prec = 0;
    msg_p->bms_cont_act_st_hv_prec = 0;

    return 0;
}

uint8_t fm29_dbc_bms_pre_charge_contactor_status_bms_cont_tar_st_hv_prec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_status_bms_cont_tar_st_hv_prec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_status_bms_cont_tar_st_hv_prec_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_status_bms_cont_act_st_hv_prec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_status_bms_cont_act_st_hv_prec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_status_bms_cont_act_st_hv_prec_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_pre_charge_contactor_status_bms_cont_coil_i_hv_prec_encode(double value)
{
    return (uint16_t)(value / 0.08);
}

double fm29_dbc_bms_pre_charge_contactor_status_bms_cont_coil_i_hv_prec_decode(uint16_t value)
{
    return ((double)value * 0.08);
}

bool fm29_dbc_bms_pre_charge_contactor_status_bms_cont_coil_i_hv_prec_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint32_t fm29_dbc_bms_pre_charge_contactor_status_bms_cont_wear_counter_hv_prec_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_status_bms_cont_wear_counter_hv_prec_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_status_bms_cont_wear_counter_hv_prec_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_hv_batt_status_errors_2_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_hv_batt_status_errors_2_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2f3u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_error_flag_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_active_diff_u1_u_cell_sum, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_warning_diff_u1_u_cell_sum, 6u, 0x40u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_active_cell_voltage_diff_over_lim, 5u, 0x20u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_warning_cell_voltage_diff_over_lim, 4u, 0x10u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_error_flag_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_h_vlink_error_ivt_comm_failure, 7u, 0x80u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_h_vlink_warning_vcu_message_integrity, 6u, 0x40u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_system_error_hv_cct_no_bat_voltage, 5u, 0x20u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_system_error_hv_cct_wrong_polarity, 4u, 0x10u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_system_error_precharge, 3u, 0x08u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_system_error_system_init_failed, 2u, 0x04u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_active_soh_low, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_error_warning_soh_low, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_error_contactor_aux_failed, 7u, 0x80u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_error_contactor_open, 6u, 0x40u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_error_contactor_generic, 5u, 0x20u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_error_eeprom_life_cycle_count, 4u, 0x10u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_warning_eeprom_life_cycle_count, 3u, 0x08u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_error_nvm_comm_failure, 2u, 0x04u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_error_ivt_meas_failure, 1u, 0x02u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_h_vlink_warning_ivt_meas_failure, 0u, 0x01u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_werror_sd_voltage, 4u, 0x10u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_werror_kl30_voltage, 3u, 0x08u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_vlink_error_analog_input_exceed_lim, 2u, 0x04u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_vlink_warning_analog_input_exceed_lim, 1u, 0x02u);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_h_vlink_error_contactor_pwm_economizer, 0u, 0x01u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_software_error_boot_faild, 6u, 0x40u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_werror_lcm_pcb_under_temp, 5u, 0x20u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_wwarning_lcm_pcb_under_temp, 4u, 0x10u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_werror_lcm_pcb_over_temp, 3u, 0x08u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_wwarning_lcm_pcb_over_temp, 2u, 0x04u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_werror_cell_temp_sensor_fail, 1u, 0x02u);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_h_werror_pcb_temp_sensor_fail, 0u, 0x01u);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_dtc_status, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_dtc_status, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_hv_batt_status_errors_2_unpack(
    struct fm29_dbc_bms_hv_batt_status_errors_2_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2f3u)) {
        return (-EINVAL);
    }

    dst_p->bms_error_flag_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_error_active_diff_u1_u_cell_sum = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->bms_error_warning_diff_u1_u_cell_sum = unpack_right_shift_u8(msg_p->data[1], 6u, 0x40u);
    dst_p->bms_error_active_cell_voltage_diff_over_lim = unpack_right_shift_u8(msg_p->data[1], 5u, 0x20u);
    dst_p->bms_error_warning_cell_voltage_diff_over_lim = unpack_right_shift_u8(msg_p->data[1], 4u, 0x10u);
    dst_p->bms_error_flag_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_h_vlink_error_ivt_comm_failure = unpack_right_shift_u8(msg_p->data[2], 7u, 0x80u);
    dst_p->bms_h_vlink_warning_vcu_message_integrity = unpack_right_shift_u8(msg_p->data[2], 6u, 0x40u);
    dst_p->bms_system_error_hv_cct_no_bat_voltage = unpack_right_shift_u8(msg_p->data[2], 5u, 0x20u);
    dst_p->bms_system_error_hv_cct_wrong_polarity = unpack_right_shift_u8(msg_p->data[2], 4u, 0x10u);
    dst_p->bms_system_error_precharge = unpack_right_shift_u8(msg_p->data[2], 3u, 0x08u);
    dst_p->bms_system_error_system_init_failed = unpack_right_shift_u8(msg_p->data[2], 2u, 0x04u);
    dst_p->bms_error_active_soh_low = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->bms_error_warning_soh_low = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->bms_h_vlink_error_contactor_aux_failed = unpack_right_shift_u8(msg_p->data[3], 7u, 0x80u);
    dst_p->bms_h_vlink_error_contactor_open = unpack_right_shift_u8(msg_p->data[3], 6u, 0x40u);
    dst_p->bms_h_vlink_error_contactor_generic = unpack_right_shift_u8(msg_p->data[3], 5u, 0x20u);
    dst_p->bms_h_vlink_error_eeprom_life_cycle_count = unpack_right_shift_u8(msg_p->data[3], 4u, 0x10u);
    dst_p->bms_h_vlink_warning_eeprom_life_cycle_count = unpack_right_shift_u8(msg_p->data[3], 3u, 0x08u);
    dst_p->bms_h_vlink_error_nvm_comm_failure = unpack_right_shift_u8(msg_p->data[3], 2u, 0x04u);
    dst_p->bms_h_vlink_error_ivt_meas_failure = unpack_right_shift_u8(msg_p->data[3], 1u, 0x02u);
    dst_p->bms_h_vlink_warning_ivt_meas_failure = unpack_right_shift_u8(msg_p->data[3], 0u, 0x01u);
    dst_p->bms_h_werror_sd_voltage = unpack_right_shift_u8(msg_p->data[4], 4u, 0x10u);
    dst_p->bms_h_werror_kl30_voltage = unpack_right_shift_u8(msg_p->data[4], 3u, 0x08u);
    dst_p->bms_h_vlink_error_analog_input_exceed_lim = unpack_right_shift_u8(msg_p->data[4], 2u, 0x04u);
    dst_p->bms_h_vlink_warning_analog_input_exceed_lim = unpack_right_shift_u8(msg_p->data[4], 1u, 0x02u);
    dst_p->bms_h_vlink_error_contactor_pwm_economizer = unpack_right_shift_u8(msg_p->data[4], 0u, 0x01u);
    dst_p->bms_software_error_boot_faild = unpack_right_shift_u8(msg_p->data[5], 6u, 0x40u);
    dst_p->bms_h_werror_lcm_pcb_under_temp = unpack_right_shift_u8(msg_p->data[5], 5u, 0x20u);
    dst_p->bms_h_wwarning_lcm_pcb_under_temp = unpack_right_shift_u8(msg_p->data[5], 4u, 0x10u);
    dst_p->bms_h_werror_lcm_pcb_over_temp = unpack_right_shift_u8(msg_p->data[5], 3u, 0x08u);
    dst_p->bms_h_wwarning_lcm_pcb_over_temp = unpack_right_shift_u8(msg_p->data[5], 2u, 0x04u);
    dst_p->bms_h_werror_cell_temp_sensor_fail = unpack_right_shift_u8(msg_p->data[5], 1u, 0x02u);
    dst_p->bms_h_werror_pcb_temp_sensor_fail = unpack_right_shift_u8(msg_p->data[5], 0u, 0x01u);
    dst_p->bms_dtc_status = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_dtc_status |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_hv_batt_status_errors_2_init(struct fm29_dbc_bms_hv_batt_status_errors_2_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_hv_batt_status_errors_2_t));
    msg_p->bms_error_active_diff_u1_u_cell_sum = 0;
    msg_p->bms_error_warning_diff_u1_u_cell_sum = 0;
    msg_p->bms_error_active_cell_voltage_diff_over_lim = 0;
    msg_p->bms_error_warning_cell_voltage_diff_over_lim = 0;
    msg_p->bms_h_vlink_error_ivt_comm_failure = 0;
    msg_p->bms_h_vlink_warning_vcu_message_integrity = 0;
    msg_p->bms_system_error_hv_cct_no_bat_voltage = 0;
    msg_p->bms_system_error_hv_cct_wrong_polarity = 0;
    msg_p->bms_system_error_precharge = 0;
    msg_p->bms_system_error_system_init_failed = 0;
    msg_p->bms_error_active_soh_low = 0;
    msg_p->bms_error_warning_soh_low = 0;
    msg_p->bms_h_vlink_error_contactor_aux_failed = 0;
    msg_p->bms_h_vlink_error_contactor_open = 0;
    msg_p->bms_h_vlink_error_contactor_generic = 0;
    msg_p->bms_h_vlink_error_eeprom_life_cycle_count = 0;
    msg_p->bms_h_vlink_warning_eeprom_life_cycle_count = 0;
    msg_p->bms_h_vlink_error_nvm_comm_failure = 0;
    msg_p->bms_h_vlink_error_ivt_meas_failure = 0;
    msg_p->bms_h_vlink_warning_ivt_meas_failure = 0;
    msg_p->bms_h_werror_sd_voltage = 0;
    msg_p->bms_h_werror_kl30_voltage = 0;
    msg_p->bms_h_vlink_error_analog_input_exceed_lim = 0;
    msg_p->bms_h_vlink_warning_analog_input_exceed_lim = 0;
    msg_p->bms_h_vlink_error_contactor_pwm_economizer = 0;
    msg_p->bms_software_error_boot_faild = 0;
    msg_p->bms_h_werror_lcm_pcb_under_temp = 0;
    msg_p->bms_h_wwarning_lcm_pcb_under_temp = 0;
    msg_p->bms_h_werror_lcm_pcb_over_temp = 0;
    msg_p->bms_h_wwarning_lcm_pcb_over_temp = 0;
    msg_p->bms_h_werror_cell_temp_sensor_fail = 0;
    msg_p->bms_h_werror_pcb_temp_sensor_fail = 0;

    return 0;
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_flag_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_flag_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_flag_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_diff_u1_u_cell_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_diff_u1_u_cell_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_diff_u1_u_cell_sum_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_diff_u1_u_cell_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_diff_u1_u_cell_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_diff_u1_u_cell_sum_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_cell_voltage_diff_over_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_cell_voltage_diff_over_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_cell_voltage_diff_over_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_cell_voltage_diff_over_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_cell_voltage_diff_over_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_cell_voltage_diff_over_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_flag_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_flag_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_flag_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_ivt_comm_failure_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_ivt_comm_failure_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_ivt_comm_failure_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_vcu_message_integrity_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_vcu_message_integrity_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_vcu_message_integrity_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_hv_cct_no_bat_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_hv_cct_no_bat_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_hv_cct_no_bat_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_hv_cct_wrong_polarity_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_hv_cct_wrong_polarity_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_hv_cct_wrong_polarity_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_precharge_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_precharge_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_precharge_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_system_init_failed_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_system_init_failed_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_system_error_system_init_failed_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_soh_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_soh_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_active_soh_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_soh_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_soh_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_error_warning_soh_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_aux_failed_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_aux_failed_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_aux_failed_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_open_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_open_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_open_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_generic_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_generic_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_generic_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_eeprom_life_cycle_count_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_eeprom_life_cycle_count_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_eeprom_life_cycle_count_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_eeprom_life_cycle_count_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_eeprom_life_cycle_count_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_eeprom_life_cycle_count_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_nvm_comm_failure_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_nvm_comm_failure_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_nvm_comm_failure_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_ivt_meas_failure_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_ivt_meas_failure_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_ivt_meas_failure_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_ivt_meas_failure_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_ivt_meas_failure_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_ivt_meas_failure_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_sd_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_sd_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_sd_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_kl30_voltage_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_kl30_voltage_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_kl30_voltage_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_analog_input_exceed_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_analog_input_exceed_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_analog_input_exceed_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_analog_input_exceed_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_analog_input_exceed_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_warning_analog_input_exceed_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_pwm_economizer_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_pwm_economizer_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_vlink_error_contactor_pwm_economizer_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_software_error_boot_faild_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_software_error_boot_faild_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_software_error_boot_faild_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_lcm_pcb_under_temp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_lcm_pcb_under_temp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_lcm_pcb_under_temp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_wwarning_lcm_pcb_under_temp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_wwarning_lcm_pcb_under_temp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_wwarning_lcm_pcb_under_temp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_lcm_pcb_over_temp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_lcm_pcb_over_temp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_lcm_pcb_over_temp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_wwarning_lcm_pcb_over_temp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_wwarning_lcm_pcb_over_temp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_wwarning_lcm_pcb_over_temp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_cell_temp_sensor_fail_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_cell_temp_sensor_fail_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_cell_temp_sensor_fail_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_pcb_temp_sensor_fail_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_pcb_temp_sensor_fail_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_h_werror_pcb_temp_sensor_fail_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_bms_hv_batt_status_errors_2_bms_dtc_status_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_hv_batt_status_errors_2_bms_dtc_status_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_errors_2_bms_dtc_status_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_soc_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_soc_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2f5u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_bat_so_c_usable, 0u, 0xffu);
    msg.data[3] |= pack_right_shift_u16(src_p->bms_bat_actual_pack_capacity, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u16(src_p->bms_bat_actual_pack_capacity, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_bat_soh, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_bat_soc_real, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_soc_unpack(
    struct fm29_dbc_bms_soc_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2f5u)) {
        return (-EINVAL);
    }

    dst_p->bms_bat_so_c_usable = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_bat_actual_pack_capacity = unpack_left_shift_u16(msg_p->data[3], 8u, 0xffu);
    dst_p->bms_bat_actual_pack_capacity |= unpack_right_shift_u16(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_bat_soh = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_soc_real = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_soc_init(struct fm29_dbc_bms_soc_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_soc_t));

    return 0;
}

uint8_t fm29_dbc_bms_soc_bms_bat_so_c_usable_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_soc_bms_bat_so_c_usable_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_soc_bms_bat_so_c_usable_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

uint16_t fm29_dbc_bms_soc_bms_bat_actual_pack_capacity_encode(double value)
{
    return (uint16_t)(value / 0.01);
}

double fm29_dbc_bms_soc_bms_bat_actual_pack_capacity_decode(uint16_t value)
{
    return ((double)value * 0.01);
}

bool fm29_dbc_bms_soc_bms_bat_actual_pack_capacity_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_soc_bms_bat_soh_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_soc_bms_bat_soh_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_soc_bms_bat_soh_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_soc_bms_bat_soc_real_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_soc_bms_bat_soc_real_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_soc_bms_bat_soc_real_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

int fm29_dbc_bms_plt_current_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_plt_current_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2f6u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_curr_plt_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_curr_plt_alive_counter, 0u, 0x0fu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_bat_d_ma_xcurr_plt, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_bat_d_ma_xcurr_plt, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_c_ma_xcurr_plt, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_c_ma_xcurr_plt, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_plt_current_unpack(
    struct fm29_dbc_bms_plt_current_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2f6u)) {
        return (-EINVAL);
    }

    dst_p->bms_curr_plt_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_curr_plt_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_bat_d_ma_xcurr_plt = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_bat_d_ma_xcurr_plt |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_c_ma_xcurr_plt = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_c_ma_xcurr_plt |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_plt_current_init(struct fm29_dbc_bms_plt_current_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_plt_current_t));

    return 0;
}

uint8_t fm29_dbc_bms_plt_current_bms_curr_plt_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_plt_current_bms_curr_plt_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_plt_current_bms_curr_plt_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_plt_current_bms_curr_plt_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_plt_current_bms_curr_plt_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_plt_current_bms_curr_plt_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_bms_plt_current_bms_bat_d_ma_xcurr_plt_encode(double value)
{
    return (uint16_t)(value / 0.05);
}

double fm29_dbc_bms_plt_current_bms_bat_d_ma_xcurr_plt_decode(uint16_t value)
{
    return ((double)value * 0.05);
}

bool fm29_dbc_bms_plt_current_bms_bat_d_ma_xcurr_plt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_plt_current_bms_bat_c_ma_xcurr_plt_encode(double value)
{
    return (uint16_t)(value / 0.05);
}

double fm29_dbc_bms_plt_current_bms_bat_c_ma_xcurr_plt_decode(uint16_t value)
{
    return ((double)value * 0.05);
}

bool fm29_dbc_bms_plt_current_bms_bat_c_ma_xcurr_plt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_c_d_cell_limit_u_i_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_c_d_cell_limit_u_i_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2f7u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_right_shift_u16(src_p->bms_bat_c_max_cell_u, 8u, 0xffu);
    msg.data[1] |= pack_left_shift_u16(src_p->bms_bat_c_max_cell_u, 0u, 0xffu);
    msg.data[2] |= pack_right_shift_u16(src_p->bms_bat_d_min_cell_u, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->bms_bat_d_min_cell_u, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_bat_d_max_pack_i, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_bat_d_max_pack_i, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_c_max_pack_i, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_c_max_pack_i, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_c_d_cell_limit_u_i_unpack(
    struct fm29_dbc_bms_c_d_cell_limit_u_i_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2f7u)) {
        return (-EINVAL);
    }

    dst_p->bms_bat_c_max_cell_u = unpack_left_shift_u16(msg_p->data[0], 8u, 0xffu);
    dst_p->bms_bat_c_max_cell_u |= unpack_right_shift_u16(msg_p->data[1], 0u, 0xffu);
    dst_p->bms_bat_d_min_cell_u = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->bms_bat_d_min_cell_u |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->bms_bat_d_max_pack_i = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_bat_d_max_pack_i |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_c_max_pack_i = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_c_max_pack_i |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_c_d_cell_limit_u_i_init(struct fm29_dbc_bms_c_d_cell_limit_u_i_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_c_d_cell_limit_u_i_t));

    return 0;
}

uint16_t fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_c_max_cell_u_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_c_max_cell_u_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_c_max_cell_u_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_d_min_cell_u_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_d_min_cell_u_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_d_min_cell_u_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_d_max_pack_i_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_d_max_pack_i_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_d_max_pack_i_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_c_max_pack_i_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_c_max_pack_i_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_c_d_cell_limit_u_i_bms_bat_c_max_pack_i_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_plt_voltage_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_plt_voltage_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x2f8u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_volt_plt_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_volt_plt_alive_counter, 0u, 0x0fu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_bat_c_ma_xvolt_plt, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_bat_c_ma_xvolt_plt, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_bat_d_ma_xvolt_plt, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_bat_d_ma_xvolt_plt, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_plt_voltage_unpack(
    struct fm29_dbc_bms_plt_voltage_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x2f8u)) {
        return (-EINVAL);
    }

    dst_p->bms_volt_plt_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_volt_plt_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_bat_c_ma_xvolt_plt = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_bat_c_ma_xvolt_plt |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_bat_d_ma_xvolt_plt = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_bat_d_ma_xvolt_plt |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_plt_voltage_init(struct fm29_dbc_bms_plt_voltage_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_plt_voltage_t));

    return 0;
}

uint8_t fm29_dbc_bms_plt_voltage_bms_volt_plt_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_plt_voltage_bms_volt_plt_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_plt_voltage_bms_volt_plt_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_plt_voltage_bms_volt_plt_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_plt_voltage_bms_volt_plt_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_plt_voltage_bms_volt_plt_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint16_t fm29_dbc_bms_plt_voltage_bms_bat_c_ma_xvolt_plt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_plt_voltage_bms_bat_c_ma_xvolt_plt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_plt_voltage_bms_bat_c_ma_xvolt_plt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_plt_voltage_bms_bat_d_ma_xvolt_plt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_bms_plt_voltage_bms_bat_d_ma_xvolt_plt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_bms_plt_voltage_bms_bat_d_ma_xvolt_plt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_esp_0x318_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_esp_0x318_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x318u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->esp_318_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->esp_brk_pedl_sts, 6u, 0x40u);
    msg.data[1] |= pack_left_shift_u8(src_p->esp_brk_pedl_sts_vld, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->esp_318_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->esp_flt_indcn_abs, 7u, 0x80u);
    msg.data[2] |= pack_left_shift_u8(src_p->esp_flt_indcn_ebd, 6u, 0x40u);
    msg.data[2] |= pack_left_shift_u8(src_p->esp_lamp_swt_off_indcn, 5u, 0x20u);
    msg.data[2] |= pack_left_shift_u8(src_p->esp_sys_actv, 4u, 0x10u);
    msg.data[2] |= pack_left_shift_u8(src_p->esp_veh_spd_vld, 0u, 0x03u);
    msg.data[3] |= pack_right_shift_u16(src_p->esp_milg_rollg_cntr_odo, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u16(src_p->esp_milg_rollg_cntr_odo, 0u, 0xffu);
    msg.data[5] |= pack_right_shift_u16(src_p->esp_veh_spd, 8u, 0xffu);
    msg.data[6] |= pack_left_shift_u16(src_p->esp_veh_spd, 0u, 0xffu);
    msg.data[7] |= pack_left_shift_u8(src_p->esp_rda_ena_flg, 6u, 0x40u);
    msg.data[7] |= pack_left_shift_u8(src_p->esp_no_brk_p, 5u, 0x20u);
    msg.data[7] |= pack_left_shift_u8(src_p->esp_avl_indcn_hdc, 4u, 0x10u);
    msg.data[7] |= pack_left_shift_u8(src_p->esp_ctrl_sts_hdc, 2u, 0x0cu);
    msg.data[7] |= pack_left_shift_u8(src_p->esp_flt_indcn_tcs, 1u, 0x02u);
    msg.data[7] |= pack_left_shift_u8(src_p->esp_inin_mod_sig_indcn, 0u, 0x01u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_esp_0x318_unpack(
    struct fm29_dbc_esp_0x318_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x318u)) {
        return (-EINVAL);
    }

    dst_p->esp_318_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->esp_brk_pedl_sts = unpack_right_shift_u8(msg_p->data[1], 6u, 0x40u);
    dst_p->esp_brk_pedl_sts_vld = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->esp_318_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->esp_flt_indcn_abs = unpack_right_shift_u8(msg_p->data[2], 7u, 0x80u);
    dst_p->esp_flt_indcn_ebd = unpack_right_shift_u8(msg_p->data[2], 6u, 0x40u);
    dst_p->esp_lamp_swt_off_indcn = unpack_right_shift_u8(msg_p->data[2], 5u, 0x20u);
    dst_p->esp_sys_actv = unpack_right_shift_u8(msg_p->data[2], 4u, 0x10u);
    dst_p->esp_veh_spd_vld = unpack_right_shift_u8(msg_p->data[2], 0u, 0x03u);
    dst_p->esp_milg_rollg_cntr_odo = unpack_left_shift_u16(msg_p->data[3], 8u, 0xffu);
    dst_p->esp_milg_rollg_cntr_odo |= unpack_right_shift_u16(msg_p->data[4], 0u, 0xffu);
    dst_p->esp_veh_spd = unpack_left_shift_u16(msg_p->data[5], 8u, 0xffu);
    dst_p->esp_veh_spd |= unpack_right_shift_u16(msg_p->data[6], 0u, 0xffu);
    dst_p->esp_rda_ena_flg = unpack_right_shift_u8(msg_p->data[7], 6u, 0x40u);
    dst_p->esp_no_brk_p = unpack_right_shift_u8(msg_p->data[7], 5u, 0x20u);
    dst_p->esp_avl_indcn_hdc = unpack_right_shift_u8(msg_p->data[7], 4u, 0x10u);
    dst_p->esp_ctrl_sts_hdc = unpack_right_shift_u8(msg_p->data[7], 2u, 0x0cu);
    dst_p->esp_flt_indcn_tcs = unpack_right_shift_u8(msg_p->data[7], 1u, 0x02u);
    dst_p->esp_inin_mod_sig_indcn = unpack_right_shift_u8(msg_p->data[7], 0u, 0x01u);

    return (0);
}

int fm29_dbc_esp_0x318_init(struct fm29_dbc_esp_0x318_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_esp_0x318_t));
    msg_p->esp_brk_pedl_sts = 0;
    msg_p->esp_brk_pedl_sts_vld = 0;
    msg_p->esp_flt_indcn_abs = 0;
    msg_p->esp_flt_indcn_ebd = 0;
    msg_p->esp_lamp_swt_off_indcn = 0;
    msg_p->esp_sys_actv = 0;
    msg_p->esp_veh_spd_vld = 0;
    msg_p->esp_rda_ena_flg = 0;
    msg_p->esp_no_brk_p = 0;
    msg_p->esp_avl_indcn_hdc = 0;
    msg_p->esp_ctrl_sts_hdc = 0;
    msg_p->esp_flt_indcn_tcs = 0;
    msg_p->esp_inin_mod_sig_indcn = 0;

    return 0;
}

uint8_t fm29_dbc_esp_0x318_esp_318_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_318_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_318_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_esp_0x318_esp_brk_pedl_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_brk_pedl_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_brk_pedl_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_brk_pedl_sts_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_brk_pedl_sts_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_brk_pedl_sts_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_esp_0x318_esp_318_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_318_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_318_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_esp_0x318_esp_flt_indcn_abs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_flt_indcn_abs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_flt_indcn_abs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_flt_indcn_ebd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_flt_indcn_ebd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_flt_indcn_ebd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_lamp_swt_off_indcn_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_lamp_swt_off_indcn_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_lamp_swt_off_indcn_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_sys_actv_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_sys_actv_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_sys_actv_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_veh_spd_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_veh_spd_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_veh_spd_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint16_t fm29_dbc_esp_0x318_esp_milg_rollg_cntr_odo_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_esp_0x318_esp_milg_rollg_cntr_odo_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_milg_rollg_cntr_odo_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_esp_0x318_esp_veh_spd_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_esp_0x318_esp_veh_spd_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_esp_0x318_esp_veh_spd_is_in_range(uint16_t value)
{
    return (value <= 3000u);
}

uint8_t fm29_dbc_esp_0x318_esp_rda_ena_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_rda_ena_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_rda_ena_flg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_no_brk_p_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_no_brk_p_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_no_brk_p_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_avl_indcn_hdc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_avl_indcn_hdc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_avl_indcn_hdc_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_ctrl_sts_hdc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_ctrl_sts_hdc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_ctrl_sts_hdc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_esp_0x318_esp_flt_indcn_tcs_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_flt_indcn_tcs_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_flt_indcn_tcs_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_esp_0x318_esp_inin_mod_sig_indcn_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_esp_0x318_esp_inin_mod_sig_indcn_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_esp_0x318_esp_inin_mod_sig_indcn_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int fm29_dbc_bms_hv_batt_status_2_tbox_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_hv_batt_status_2_tbox_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x330u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 10u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_330_391_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_330_391_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_sys_flt_disp, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_veh_insul_flt_disp, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_pwr_batt_rmng_cp_soc, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_pwr_batt_avl_cp, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_pwr_batt_avl_cp, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_pwr_batt_insul_sts, 6u, 0xc0u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_pwr_batt_over_t, 5u, 0x20u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_pwr_batt_therm_runaway_alrm, 1u, 0x02u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cell_min_t_alrm, 0u, 0x01u);
    msg.data[8] |= pack_left_shift_u8(src_p->bms_330_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[9] |= pack_left_shift_u8(src_p->bms_330_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[10] |= pack_left_shift_u8(src_p->bms_330_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[11] |= pack_left_shift_u8(src_p->bms_330_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (16);
}

int fm29_dbc_bms_hv_batt_status_2_tbox_unpack(
    struct fm29_dbc_bms_hv_batt_status_2_tbox_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 10u) || (msg_p->id != 0x330u)) {
        return (-EINVAL);
    }

    dst_p->bms_330_391_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_330_391_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_pwr_batt_sys_flt_disp = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->bms_veh_insul_flt_disp = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->bms_pwr_batt_rmng_cp_soc = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->bms_pwr_batt_avl_cp = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_pwr_batt_avl_cp |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_pwr_batt_insul_sts = unpack_right_shift_u8(msg_p->data[6], 6u, 0xc0u);
    dst_p->bms_pwr_batt_over_t = unpack_right_shift_u8(msg_p->data[6], 5u, 0x20u);
    dst_p->bms_pwr_batt_therm_runaway_alrm = unpack_right_shift_u8(msg_p->data[6], 1u, 0x02u);
    dst_p->bms_cell_min_t_alrm = unpack_right_shift_u8(msg_p->data[6], 0u, 0x01u);
    dst_p->bms_330_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[8], 0u, 0xffu);
    dst_p->bms_330_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[9], 0u, 0xffu);
    dst_p->bms_330_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[10], 0u, 0xffu);
    dst_p->bms_330_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[11], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_hv_batt_status_2_tbox_init(struct fm29_dbc_bms_hv_batt_status_2_tbox_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_hv_batt_status_2_tbox_t));
    msg_p->bms_pwr_batt_sys_flt_disp = 0;
    msg_p->bms_veh_insul_flt_disp = 0;
    msg_p->bms_pwr_batt_insul_sts = 0;
    msg_p->bms_pwr_batt_over_t = 0;
    msg_p->bms_pwr_batt_therm_runaway_alrm = 0;
    msg_p->bms_cell_min_t_alrm = 0;

    return 0;
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_391_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_391_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_391_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_391_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_391_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_391_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_sys_flt_disp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_sys_flt_disp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_sys_flt_disp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_veh_insul_flt_disp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_veh_insul_flt_disp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_veh_insul_flt_disp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_rmng_cp_soc_encode(double value)
{
    return (uint8_t)(value / 0.4);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_rmng_cp_soc_decode(uint8_t value)
{
    return ((double)value * 0.4);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_rmng_cp_soc_is_in_range(uint8_t value)
{
    return (value <= 250u);
}

uint16_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_avl_cp_encode(double value)
{
    return (uint16_t)(value / 0.01);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_avl_cp_decode(uint16_t value)
{
    return ((double)value * 0.01);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_avl_cp_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_insul_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_insul_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_insul_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_over_t_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_over_t_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_over_t_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_therm_runaway_alrm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_therm_runaway_alrm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_pwr_batt_therm_runaway_alrm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_cell_min_t_alrm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_cell_min_t_alrm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_cell_min_t_alrm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_hv_batt_status_2_tbox_bms_330_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bcm_0x333_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bcm_0x333_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x333u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bcm_333_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bcm_kl15_off_announcement, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->bcm_333_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bcm_pwr_mod_vld, 6u, 0xc0u);
    msg.data[2] |= pack_left_shift_u8(src_p->bcm_pwr_mod, 3u, 0x38u);
    msg.data[2] |= pack_left_shift_u8(src_p->bcm_ig1_sts, 1u, 0x06u);
    msg.data[3] |= pack_left_shift_u8(src_p->bcm_ig2_sts_vld_cape, 5u, 0x60u);
    msg.data[3] |= pack_left_shift_u8(src_p->bcm_ig1_sts_vld_cape, 3u, 0x18u);
    msg.data[3] |= pack_left_shift_u8(src_p->bcm_brk_swt_sts, 1u, 0x02u);
    msg.data[4] |= pack_left_shift_u8(src_p->bcm_interior_swt_st, 5u, 0x60u);
    msg.data[4] |= pack_left_shift_u8(src_p->bcm_ig2_sts, 3u, 0x18u);
    msg.data[4] |= pack_left_shift_u8(src_p->bcm_kl30s_l, 0u, 0x03u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bcm_0x333_unpack(
    struct fm29_dbc_bcm_0x333_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x333u)) {
        return (-EINVAL);
    }

    dst_p->bcm_333_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bcm_kl15_off_announcement = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->bcm_333_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bcm_pwr_mod_vld = unpack_right_shift_u8(msg_p->data[2], 6u, 0xc0u);
    dst_p->bcm_pwr_mod = unpack_right_shift_u8(msg_p->data[2], 3u, 0x38u);
    dst_p->bcm_ig1_sts = unpack_right_shift_u8(msg_p->data[2], 1u, 0x06u);
    dst_p->bcm_ig2_sts_vld_cape = unpack_right_shift_u8(msg_p->data[3], 5u, 0x60u);
    dst_p->bcm_ig1_sts_vld_cape = unpack_right_shift_u8(msg_p->data[3], 3u, 0x18u);
    dst_p->bcm_brk_swt_sts = unpack_right_shift_u8(msg_p->data[3], 1u, 0x02u);
    dst_p->bcm_interior_swt_st = unpack_right_shift_u8(msg_p->data[4], 5u, 0x60u);
    dst_p->bcm_ig2_sts = unpack_right_shift_u8(msg_p->data[4], 3u, 0x18u);
    dst_p->bcm_kl30s_l = unpack_right_shift_u8(msg_p->data[4], 0u, 0x03u);

    return (0);
}

int fm29_dbc_bcm_0x333_init(struct fm29_dbc_bcm_0x333_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bcm_0x333_t));
    msg_p->bcm_kl15_off_announcement = 0;
    msg_p->bcm_pwr_mod_vld = 0;
    msg_p->bcm_pwr_mod = 0;
    msg_p->bcm_ig1_sts = 0;
    msg_p->bcm_ig2_sts_vld_cape = 0;
    msg_p->bcm_ig1_sts_vld_cape = 0;
    msg_p->bcm_brk_swt_sts = 0;
    msg_p->bcm_interior_swt_st = 0;
    msg_p->bcm_ig2_sts = 0;
    msg_p->bcm_kl30s_l = 0;

    return 0;
}

uint8_t fm29_dbc_bcm_0x333_bcm_333_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_333_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_333_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bcm_0x333_bcm_kl15_off_announcement_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_kl15_off_announcement_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_kl15_off_announcement_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_333_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_333_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_333_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_pwr_mod_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_pwr_mod_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_pwr_mod_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_pwr_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_pwr_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_pwr_mod_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_ig1_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_ig1_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_ig1_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_ig2_sts_vld_cape_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_ig2_sts_vld_cape_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_ig2_sts_vld_cape_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_ig1_sts_vld_cape_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_ig1_sts_vld_cape_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_ig1_sts_vld_cape_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_brk_swt_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_brk_swt_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_brk_swt_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_interior_swt_st_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_interior_swt_st_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_interior_swt_st_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_ig2_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_ig2_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_ig2_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bcm_0x333_bcm_kl30s_l_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bcm_0x333_bcm_kl30s_l_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bcm_0x333_bcm_kl30s_l_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int fm29_dbc_vcu_0x358_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_vcu_0x358_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x358u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->vcu_358_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_e_pedl_ena_sig, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_kickdwn_flg, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_358_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_e_pedl_sts_fb, 6u, 0xc0u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_accel_mod_fb, 4u, 0x30u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_regen_lvl_fb, 2u, 0x0cu);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_com_flt_i_booster, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_com_lost_flt_esp, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_cc_trg_spd_disp, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_disp_spd_unit_cc, 7u, 0x80u);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_cc_icon_disp, 4u, 0x70u);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_sts_cc_icc, 0u, 0x0fu);
    msg.data[5] |= pack_left_shift_u8(src_p->vcu_ota_ecu_inhb_req, 6u, 0xc0u);
    msg.data[5] |= pack_left_shift_u8(src_p->vcu_ota_rdy_fb, 4u, 0x30u);
    msg.data[5] |= pack_left_shift_u8(src_p->vcu_boost_en_stat, 0u, 0x0fu);
    msg.data[6] |= pack_left_shift_u8(src_p->vcu_ota_veh_inhb_asil_fb, 2u, 0x0cu);
    msg.data[6] |= pack_left_shift_u8(src_p->vcu_ota_veh_cdn_chk_asil, 0u, 0x03u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_vcu_0x358_unpack(
    struct fm29_dbc_vcu_0x358_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x358u)) {
        return (-EINVAL);
    }

    dst_p->vcu_358_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->vcu_e_pedl_ena_sig = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->vcu_kickdwn_flg = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->vcu_358_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->vcu_e_pedl_sts_fb = unpack_right_shift_u8(msg_p->data[2], 6u, 0xc0u);
    dst_p->vcu_accel_mod_fb = unpack_right_shift_u8(msg_p->data[2], 4u, 0x30u);
    dst_p->vcu_regen_lvl_fb = unpack_right_shift_u8(msg_p->data[2], 2u, 0x0cu);
    dst_p->vcu_com_flt_i_booster = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->vcu_com_lost_flt_esp = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->vcu_cc_trg_spd_disp = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->vcu_disp_spd_unit_cc = unpack_right_shift_u8(msg_p->data[4], 7u, 0x80u);
    dst_p->vcu_cc_icon_disp = unpack_right_shift_u8(msg_p->data[4], 4u, 0x70u);
    dst_p->vcu_sts_cc_icc = unpack_right_shift_u8(msg_p->data[4], 0u, 0x0fu);
    dst_p->vcu_ota_ecu_inhb_req = unpack_right_shift_u8(msg_p->data[5], 6u, 0xc0u);
    dst_p->vcu_ota_rdy_fb = unpack_right_shift_u8(msg_p->data[5], 4u, 0x30u);
    dst_p->vcu_boost_en_stat = unpack_right_shift_u8(msg_p->data[5], 0u, 0x0fu);
    dst_p->vcu_ota_veh_inhb_asil_fb = unpack_right_shift_u8(msg_p->data[6], 2u, 0x0cu);
    dst_p->vcu_ota_veh_cdn_chk_asil = unpack_right_shift_u8(msg_p->data[6], 0u, 0x03u);

    return (0);
}

int fm29_dbc_vcu_0x358_init(struct fm29_dbc_vcu_0x358_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_vcu_0x358_t));
    msg_p->vcu_e_pedl_ena_sig = 0;
    msg_p->vcu_kickdwn_flg = 0;
    msg_p->vcu_e_pedl_sts_fb = 0;
    msg_p->vcu_accel_mod_fb = 0;
    msg_p->vcu_regen_lvl_fb = 0;
    msg_p->vcu_com_flt_i_booster = 0;
    msg_p->vcu_com_lost_flt_esp = 0;
    msg_p->vcu_disp_spd_unit_cc = 0;
    msg_p->vcu_cc_icon_disp = 0;
    msg_p->vcu_sts_cc_icc = 0;
    msg_p->vcu_ota_ecu_inhb_req = 0;
    msg_p->vcu_ota_rdy_fb = 0;
    msg_p->vcu_boost_en_stat = 0;
    msg_p->vcu_ota_veh_inhb_asil_fb = 0;
    msg_p->vcu_ota_veh_cdn_chk_asil = 0;

    return 0;
}

uint8_t fm29_dbc_vcu_0x358_vcu_358_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_358_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_358_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x358_vcu_e_pedl_ena_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_e_pedl_ena_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_e_pedl_ena_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_kickdwn_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_kickdwn_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_kickdwn_flg_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_358_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_358_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_358_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_e_pedl_sts_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_e_pedl_sts_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_e_pedl_sts_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_accel_mod_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_accel_mod_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_accel_mod_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_regen_lvl_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_regen_lvl_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_regen_lvl_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_com_flt_i_booster_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_com_flt_i_booster_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_com_flt_i_booster_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_com_lost_flt_esp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_com_lost_flt_esp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_com_lost_flt_esp_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_cc_trg_spd_disp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_cc_trg_spd_disp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_cc_trg_spd_disp_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x358_vcu_disp_spd_unit_cc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_disp_spd_unit_cc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_disp_spd_unit_cc_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_cc_icon_disp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_cc_icon_disp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_cc_icon_disp_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_sts_cc_icc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_sts_cc_icc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_sts_cc_icc_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_ota_ecu_inhb_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_ota_ecu_inhb_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_ota_ecu_inhb_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_ota_rdy_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_ota_rdy_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_ota_rdy_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_boost_en_stat_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_boost_en_stat_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_boost_en_stat_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_ota_veh_inhb_asil_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_ota_veh_inhb_asil_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_ota_veh_inhb_asil_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x358_vcu_ota_veh_cdn_chk_asil_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x358_vcu_ota_veh_cdn_chk_asil_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x358_vcu_ota_veh_cdn_chk_asil_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int fm29_dbc_bms_isolation_resistance_actual_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_isolation_resistance_actual_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x360u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_right_shift_u16(src_p->bms_pwr_batt_pos_gnd_insul_rrel, 8u, 0xffu);
    msg.data[1] |= pack_left_shift_u16(src_p->bms_pwr_batt_pos_gnd_insul_rrel, 0u, 0xffu);
    msg.data[2] |= pack_right_shift_u16(src_p->bms_pwr_batt_neg_gnd_insul_rrel, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->bms_pwr_batt_neg_gnd_insul_rrel, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_pwr_batt_pos_gnd_insul_r, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_pwr_batt_pos_gnd_insul_r, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_pwr_batt_neg_gnd_insul_r, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_pwr_batt_neg_gnd_insul_r, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_isolation_resistance_actual_unpack(
    struct fm29_dbc_bms_isolation_resistance_actual_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x360u)) {
        return (-EINVAL);
    }

    dst_p->bms_pwr_batt_pos_gnd_insul_rrel = unpack_left_shift_u16(msg_p->data[0], 8u, 0xffu);
    dst_p->bms_pwr_batt_pos_gnd_insul_rrel |= unpack_right_shift_u16(msg_p->data[1], 0u, 0xffu);
    dst_p->bms_pwr_batt_neg_gnd_insul_rrel = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->bms_pwr_batt_neg_gnd_insul_rrel |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->bms_pwr_batt_pos_gnd_insul_r = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_pwr_batt_pos_gnd_insul_r |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_pwr_batt_neg_gnd_insul_r = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->bms_pwr_batt_neg_gnd_insul_r |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_isolation_resistance_actual_init(struct fm29_dbc_bms_isolation_resistance_actual_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_isolation_resistance_actual_t));

    return 0;
}

uint16_t fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_pos_gnd_insul_rrel_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_pos_gnd_insul_rrel_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_pos_gnd_insul_rrel_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_neg_gnd_insul_rrel_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_neg_gnd_insul_rrel_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_neg_gnd_insul_rrel_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_pos_gnd_insul_r_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_pos_gnd_insul_r_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_pos_gnd_insul_r_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_neg_gnd_insul_r_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_neg_gnd_insul_r_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_isolation_resistance_actual_bms_pwr_batt_neg_gnd_insul_r_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_cell_temp_cooling_heating_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_cell_temp_cooling_heating_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x372u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 10u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_372_382_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_ota_rdy_fb, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_372_382_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_cell_min_t, 0u, 0xffu);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_cell_diff_t, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->bms_cell_max_t, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_batt_avrg_t, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_ecc_sys_allw_dwn_pwr_cmd, 2u, 0x04u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_pwr_batt_heatg_mng_dmd, 0u, 0x03u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_batt_inl_t_dmd, 0u, 0xffu);
    msg.data[8] |= pack_left_shift_u8(src_p->bms_372_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[9] |= pack_left_shift_u8(src_p->bms_372_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[10] |= pack_left_shift_u8(src_p->bms_372_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[11] |= pack_left_shift_u8(src_p->bms_372_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (16);
}

int fm29_dbc_bms_cell_temp_cooling_heating_unpack(
    struct fm29_dbc_bms_cell_temp_cooling_heating_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 10u) || (msg_p->id != 0x372u)) {
        return (-EINVAL);
    }

    dst_p->bms_372_382_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_ota_rdy_fb = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->bms_372_382_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->bms_cell_min_t = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_cell_diff_t = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->bms_cell_max_t = unpack_right_shift_u8(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_batt_avrg_t = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_ecc_sys_allw_dwn_pwr_cmd = unpack_right_shift_u8(msg_p->data[6], 2u, 0x04u);
    dst_p->bms_pwr_batt_heatg_mng_dmd = unpack_right_shift_u8(msg_p->data[6], 0u, 0x03u);
    dst_p->bms_batt_inl_t_dmd = unpack_right_shift_u8(msg_p->data[7], 0u, 0xffu);
    dst_p->bms_372_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[8], 0u, 0xffu);
    dst_p->bms_372_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[9], 0u, 0xffu);
    dst_p->bms_372_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[10], 0u, 0xffu);
    dst_p->bms_372_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[11], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_cell_temp_cooling_heating_init(struct fm29_dbc_bms_cell_temp_cooling_heating_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_cell_temp_cooling_heating_t));
    msg_p->bms_ota_rdy_fb = 0;
    msg_p->bms_ecc_sys_allw_dwn_pwr_cmd = 0;
    msg_p->bms_pwr_batt_heatg_mng_dmd = 0;

    return 0;
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_372_382_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_372_382_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_372_382_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_ota_rdy_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_ota_rdy_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_ota_rdy_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_372_382_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_372_382_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_372_382_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_min_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_min_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_min_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_diff_t_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_diff_t_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_diff_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_max_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_max_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_cell_max_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_batt_avrg_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_batt_avrg_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_batt_avrg_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_ecc_sys_allw_dwn_pwr_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_ecc_sys_allw_dwn_pwr_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_ecc_sys_allw_dwn_pwr_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_pwr_batt_heatg_mng_dmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_pwr_batt_heatg_mng_dmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_pwr_batt_heatg_mng_dmd_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_batt_inl_t_dmd_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_batt_inl_t_dmd_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_batt_inl_t_dmd_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_cell_temp_cooling_heating_bms_372_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_ecc_0x373_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_ecc_0x373_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x373u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->ecc_ac_sts, 7u, 0x80u);
    msg.data[0] |= pack_left_shift_u8(src_p->ecc_pwr_sys_heat_mngt_sts, 5u, 0x60u);
    msg.data[0] |= pack_left_shift_u8(src_p->ecc_inin_sts, 4u, 0x10u);
    msg.data[0] |= pack_left_shift_u8(src_p->ecc_crt_sts, 0u, 0x0fu);
    msg.data[1] |= pack_left_shift_u8(src_p->ecc_back_row_air_outl_mod_sts, 5u, 0xe0u);
    msg.data[1] |= pack_left_shift_u8(src_p->ecc_wind_spd_sts, 1u, 0x1eu);
    msg.data[1] |= pack_left_shift_u8(src_p->ecc_air_cln_sts, 0u, 0x01u);
    msg.data[2] |= pack_left_shift_u8(src_p->ecc_drvr_t_set_sts, 0u, 0xffu);
    msg.data[3] |= pack_left_shift_u8(src_p->ecc_pass_t_set_sts, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_particle_conc_vld, 6u, 0xc0u);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_circ_sts, 5u, 0x20u);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_info_sys_wrm_cold_disp, 3u, 0x18u);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_sync_sts, 2u, 0x04u);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_auto_sts, 1u, 0x02u);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_heat_sts, 0u, 0x01u);
    msg.data[5] |= pack_left_shift_u8(src_p->ecc_outd_t, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->ecc_drvr_air_outl_mod, 5u, 0xe0u);
    msg.data[6] |= pack_left_shift_u8(src_p->ecc_heat_mngt_fct_lim, 4u, 0x10u);
    msg.data[6] |= pack_left_shift_u8(src_p->ecc_heat_mngt_sys_flt, 3u, 0x08u);
    msg.data[6] |= pack_left_shift_u8(src_p->ecc_max_frnt_defrst, 2u, 0x04u);
    msg.data[6] |= pack_left_shift_u8(src_p->ecc_outd_t_vld, 0u, 0x03u);
    msg.data[7] |= pack_left_shift_u8(src_p->ecc_ota_inhb_rdy, 5u, 0x60u);
    msg.data[7] |= pack_left_shift_u8(src_p->ecc_rem_sts, 3u, 0x18u);
    msg.data[7] |= pack_left_shift_u8(src_p->ecc_pass_air_outl_mod, 0u, 0x07u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_ecc_0x373_unpack(
    struct fm29_dbc_ecc_0x373_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x373u)) {
        return (-EINVAL);
    }

    dst_p->ecc_ac_sts = unpack_right_shift_u8(msg_p->data[0], 7u, 0x80u);
    dst_p->ecc_pwr_sys_heat_mngt_sts = unpack_right_shift_u8(msg_p->data[0], 5u, 0x60u);
    dst_p->ecc_inin_sts = unpack_right_shift_u8(msg_p->data[0], 4u, 0x10u);
    dst_p->ecc_crt_sts = unpack_right_shift_u8(msg_p->data[0], 0u, 0x0fu);
    dst_p->ecc_back_row_air_outl_mod_sts = unpack_right_shift_u8(msg_p->data[1], 5u, 0xe0u);
    dst_p->ecc_wind_spd_sts = unpack_right_shift_u8(msg_p->data[1], 1u, 0x1eu);
    dst_p->ecc_air_cln_sts = unpack_right_shift_u8(msg_p->data[1], 0u, 0x01u);
    dst_p->ecc_drvr_t_set_sts = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->ecc_pass_t_set_sts = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->ecc_particle_conc_vld = unpack_right_shift_u8(msg_p->data[4], 6u, 0xc0u);
    dst_p->ecc_circ_sts = unpack_right_shift_u8(msg_p->data[4], 5u, 0x20u);
    dst_p->ecc_info_sys_wrm_cold_disp = unpack_right_shift_u8(msg_p->data[4], 3u, 0x18u);
    dst_p->ecc_sync_sts = unpack_right_shift_u8(msg_p->data[4], 2u, 0x04u);
    dst_p->ecc_auto_sts = unpack_right_shift_u8(msg_p->data[4], 1u, 0x02u);
    dst_p->ecc_heat_sts = unpack_right_shift_u8(msg_p->data[4], 0u, 0x01u);
    dst_p->ecc_outd_t = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->ecc_drvr_air_outl_mod = unpack_right_shift_u8(msg_p->data[6], 5u, 0xe0u);
    dst_p->ecc_heat_mngt_fct_lim = unpack_right_shift_u8(msg_p->data[6], 4u, 0x10u);
    dst_p->ecc_heat_mngt_sys_flt = unpack_right_shift_u8(msg_p->data[6], 3u, 0x08u);
    dst_p->ecc_max_frnt_defrst = unpack_right_shift_u8(msg_p->data[6], 2u, 0x04u);
    dst_p->ecc_outd_t_vld = unpack_right_shift_u8(msg_p->data[6], 0u, 0x03u);
    dst_p->ecc_ota_inhb_rdy = unpack_right_shift_u8(msg_p->data[7], 5u, 0x60u);
    dst_p->ecc_rem_sts = unpack_right_shift_u8(msg_p->data[7], 3u, 0x18u);
    dst_p->ecc_pass_air_outl_mod = unpack_right_shift_u8(msg_p->data[7], 0u, 0x07u);

    return (0);
}

int fm29_dbc_ecc_0x373_init(struct fm29_dbc_ecc_0x373_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_ecc_0x373_t));
    msg_p->ecc_ac_sts = 0;
    msg_p->ecc_pwr_sys_heat_mngt_sts = 0;
    msg_p->ecc_inin_sts = 0;
    msg_p->ecc_crt_sts = 0;
    msg_p->ecc_back_row_air_outl_mod_sts = 0;
    msg_p->ecc_wind_spd_sts = 0;
    msg_p->ecc_air_cln_sts = 0;
    msg_p->ecc_drvr_t_set_sts = 0;
    msg_p->ecc_pass_t_set_sts = 0;
    msg_p->ecc_particle_conc_vld = 0;
    msg_p->ecc_circ_sts = 0;
    msg_p->ecc_info_sys_wrm_cold_disp = 0;
    msg_p->ecc_sync_sts = 0;
    msg_p->ecc_auto_sts = 0;
    msg_p->ecc_heat_sts = 0;
    msg_p->ecc_outd_t = 48;
    msg_p->ecc_drvr_air_outl_mod = 0;
    msg_p->ecc_heat_mngt_fct_lim = 0;
    msg_p->ecc_heat_mngt_sys_flt = 0;
    msg_p->ecc_max_frnt_defrst = 0;
    msg_p->ecc_outd_t_vld = 0;
    msg_p->ecc_ota_inhb_rdy = 0;
    msg_p->ecc_rem_sts = 0;
    msg_p->ecc_pass_air_outl_mod = 0;

    return 0;
}

uint8_t fm29_dbc_ecc_0x373_ecc_ac_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_ac_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_ac_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_pwr_sys_heat_mngt_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_pwr_sys_heat_mngt_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_pwr_sys_heat_mngt_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_inin_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_inin_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_inin_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_crt_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_crt_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_crt_sts_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_back_row_air_outl_mod_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_back_row_air_outl_mod_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_back_row_air_outl_mod_sts_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_wind_spd_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_wind_spd_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_wind_spd_sts_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_air_cln_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_air_cln_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_air_cln_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_drvr_t_set_sts_encode(double value)
{
    return (uint8_t)(value / 0.5);
}

double fm29_dbc_ecc_0x373_ecc_drvr_t_set_sts_decode(uint8_t value)
{
    return ((double)value * 0.5);
}

bool fm29_dbc_ecc_0x373_ecc_drvr_t_set_sts_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x373_ecc_pass_t_set_sts_encode(double value)
{
    return (uint8_t)(value / 0.5);
}

double fm29_dbc_ecc_0x373_ecc_pass_t_set_sts_decode(uint8_t value)
{
    return ((double)value * 0.5);
}

bool fm29_dbc_ecc_0x373_ecc_pass_t_set_sts_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x373_ecc_particle_conc_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_particle_conc_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_particle_conc_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_circ_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_circ_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_circ_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_info_sys_wrm_cold_disp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_info_sys_wrm_cold_disp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_info_sys_wrm_cold_disp_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_sync_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_sync_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_sync_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_auto_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_auto_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_auto_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_heat_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_heat_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_heat_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_outd_t_encode(double value)
{
    return (uint8_t)((value - -48.0) / 0.5);
}

double fm29_dbc_ecc_0x373_ecc_outd_t_decode(uint8_t value)
{
    return (((double)value * 0.5) + -48.0);
}

bool fm29_dbc_ecc_0x373_ecc_outd_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x373_ecc_drvr_air_outl_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_drvr_air_outl_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_drvr_air_outl_mod_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_heat_mngt_fct_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_heat_mngt_fct_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_heat_mngt_fct_lim_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_heat_mngt_sys_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_heat_mngt_sys_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_heat_mngt_sys_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_max_frnt_defrst_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_max_frnt_defrst_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_max_frnt_defrst_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_outd_t_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_outd_t_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_outd_t_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_ota_inhb_rdy_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_ota_inhb_rdy_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_ota_inhb_rdy_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_rem_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_rem_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_rem_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_ecc_0x373_ecc_pass_air_outl_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x373_ecc_pass_air_outl_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x373_ecc_pass_air_outl_mod_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int fm29_dbc_wtc_b_0x376_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_wtc_b_0x376_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x376u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[2] |= pack_left_shift_u8(src_p->wtc_b_inl_t, 0u, 0xffu);
    msg.data[3] |= pack_left_shift_u8(src_p->wtc_b_outl_t, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->wtc_b_crt_pwr, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->wtc_b_crt_pwr, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->wtc_b_crt_t, 0u, 0xffu);
    msg.data[7] |= pack_left_shift_u8(src_p->wtc_b_mod, 6u, 0x40u);
    msg.data[7] |= pack_left_shift_u8(src_p->wtc_b_act_gear, 2u, 0x3cu);
    msg.data[7] |= pack_left_shift_u8(src_p->wtc_b_hv_pwr_sply_sts, 1u, 0x02u);
    msg.data[7] |= pack_left_shift_u8(src_p->wtc_b_inin_sts, 0u, 0x01u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_wtc_b_0x376_unpack(
    struct fm29_dbc_wtc_b_0x376_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x376u)) {
        return (-EINVAL);
    }

    dst_p->wtc_b_inl_t = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->wtc_b_outl_t = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->wtc_b_crt_pwr = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->wtc_b_crt_pwr |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->wtc_b_crt_t = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);
    dst_p->wtc_b_mod = unpack_right_shift_u8(msg_p->data[7], 6u, 0x40u);
    dst_p->wtc_b_act_gear = unpack_right_shift_u8(msg_p->data[7], 2u, 0x3cu);
    dst_p->wtc_b_hv_pwr_sply_sts = unpack_right_shift_u8(msg_p->data[7], 1u, 0x02u);
    dst_p->wtc_b_inin_sts = unpack_right_shift_u8(msg_p->data[7], 0u, 0x01u);

    return (0);
}

int fm29_dbc_wtc_b_0x376_init(struct fm29_dbc_wtc_b_0x376_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_wtc_b_0x376_t));
    msg_p->wtc_b_inl_t = 0;
    msg_p->wtc_b_outl_t = 0;
    msg_p->wtc_b_crt_t = 0;
    msg_p->wtc_b_mod = 0;
    msg_p->wtc_b_act_gear = 0;
    msg_p->wtc_b_hv_pwr_sply_sts = 0;
    msg_p->wtc_b_inin_sts = 0;

    return 0;
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_inl_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_wtc_b_0x376_wtc_b_inl_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_inl_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_outl_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_wtc_b_0x376_wtc_b_outl_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_outl_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_wtc_b_0x376_wtc_b_crt_pwr_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_wtc_b_0x376_wtc_b_crt_pwr_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_crt_pwr_is_in_range(uint16_t value)
{
    return (value <= 10000u);
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_crt_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_wtc_b_0x376_wtc_b_crt_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_crt_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_wtc_b_0x376_wtc_b_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_mod_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_act_gear_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_wtc_b_0x376_wtc_b_act_gear_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_act_gear_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_hv_pwr_sply_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_wtc_b_0x376_wtc_b_hv_pwr_sply_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_hv_pwr_sply_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_wtc_b_0x376_wtc_b_inin_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_wtc_b_0x376_wtc_b_inin_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_wtc_b_0x376_wtc_b_inin_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int fm29_dbc_tbox_0x385_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x385_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x385u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_pre_heat_depart_ti1_hr, 0u, 0x1fu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_pre_heat_depart_set, 6u, 0xc0u);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_pre_heat_depart_ti1_mins, 0u, 0x3fu);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_sun_pre_heat_depart_set, 6u, 0x40u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_sat_pre_heat_depart_set, 5u, 0x20u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_fri_pre_heat_depart_set, 4u, 0x10u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_thu_pre_heat_depart_set, 3u, 0x08u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_wed_pre_heat_depart_set, 2u, 0x04u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_tue_pre_heat_depart_set, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_mon_pre_heat_depart_set, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_pre_cdn_tar_t, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_pre_heat_depart_ti2_hr, 2u, 0x7cu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_pre_heat_depart_set_fb, 0u, 0x03u);
    msg.data[5] |= pack_right_shift_u8(src_p->tbox_pre_heat_depart_ti2_mins, 1u, 0x1fu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_pre_heat_depart_ti2_mins, 7u, 0x80u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x385_unpack(
    struct fm29_dbc_tbox_0x385_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x385u)) {
        return (-EINVAL);
    }

    dst_p->tbox_pre_heat_depart_ti1_hr = unpack_right_shift_u8(msg_p->data[0], 0u, 0x1fu);
    dst_p->tbox_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[1], 6u, 0xc0u);
    dst_p->tbox_pre_heat_depart_ti1_mins = unpack_right_shift_u8(msg_p->data[1], 0u, 0x3fu);
    dst_p->tbox_sun_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 6u, 0x40u);
    dst_p->tbox_sat_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 5u, 0x20u);
    dst_p->tbox_fri_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 4u, 0x10u);
    dst_p->tbox_thu_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 3u, 0x08u);
    dst_p->tbox_wed_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 2u, 0x04u);
    dst_p->tbox_tue_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->tbox_mon_pre_heat_depart_set = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->tbox_pre_cdn_tar_t = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->tbox_pre_heat_depart_ti2_hr = unpack_right_shift_u8(msg_p->data[4], 2u, 0x7cu);
    dst_p->tbox_pre_heat_depart_set_fb = unpack_right_shift_u8(msg_p->data[4], 0u, 0x03u);
    dst_p->tbox_pre_heat_depart_ti2_mins = unpack_left_shift_u8(msg_p->data[5], 1u, 0x1fu);
    dst_p->tbox_pre_heat_depart_ti2_mins |= unpack_right_shift_u8(msg_p->data[6], 7u, 0x80u);

    return (0);
}

int fm29_dbc_tbox_0x385_init(struct fm29_dbc_tbox_0x385_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x385_t));
    msg_p->tbox_pre_heat_depart_set = 0;
    msg_p->tbox_sun_pre_heat_depart_set = 0;
    msg_p->tbox_sat_pre_heat_depart_set = 0;
    msg_p->tbox_fri_pre_heat_depart_set = 0;
    msg_p->tbox_thu_pre_heat_depart_set = 0;
    msg_p->tbox_wed_pre_heat_depart_set = 0;
    msg_p->tbox_tue_pre_heat_depart_set = 0;
    msg_p->tbox_mon_pre_heat_depart_set = 0;
    msg_p->tbox_pre_heat_depart_set_fb = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti1_hr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti1_hr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti1_hr_is_in_range(uint8_t value)
{
    return (value <= 23u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti1_mins_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti1_mins_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti1_mins_is_in_range(uint8_t value)
{
    return (value <= 59u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_sun_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_sun_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_sun_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_sat_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_sat_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_sat_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_fri_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_fri_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_fri_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_thu_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_thu_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_thu_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_wed_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_wed_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_wed_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_tue_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_tue_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_tue_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_mon_pre_heat_depart_set_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_mon_pre_heat_depart_set_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_mon_pre_heat_depart_set_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_cdn_tar_t_encode(double value)
{
    return (uint8_t)(value / 0.5);
}

double fm29_dbc_tbox_0x385_tbox_pre_cdn_tar_t_decode(uint8_t value)
{
    return ((double)value * 0.5);
}

bool fm29_dbc_tbox_0x385_tbox_pre_cdn_tar_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti2_hr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti2_hr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti2_hr_is_in_range(uint8_t value)
{
    return (value <= 23u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_heat_depart_set_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_pre_heat_depart_set_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_pre_heat_depart_set_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti2_mins_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti2_mins_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x385_tbox_pre_heat_depart_ti2_mins_is_in_range(uint8_t value)
{
    return (value <= 59u);
}

int fm29_dbc_bms_mai_ncontactor_pos_err_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_mai_ncontactor_pos_err_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x3a0u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_exceed_hv_pos1, 3u, 0x08u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_welded_hv_pos1, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_stuck_open_hv_pos1, 1u, 0x02u);
    msg.data[1] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pos1, 24u, 0xffu);
    msg.data[2] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pos1, 16u, 0xffu);
    msg.data[3] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pos1, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pos1, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch2_hv_pos1, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch4_hv_pos1, 4u, 0xf0u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch3_hv_pos1, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch2_hv_pos1, 4u, 0xf0u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch1_hv_pos1, 0u, 0x0fu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_mai_ncontactor_pos_err_status_unpack(
    struct fm29_dbc_bms_mai_ncontactor_pos_err_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x3a0u)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_error_exceed_hv_pos1 = unpack_right_shift_u8(msg_p->data[0], 3u, 0x08u);
    dst_p->bms_cont_error_welded_hv_pos1 = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->bms_cont_error_stuck_open_hv_pos1 = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_error_dis_ch1_hv_pos1 = unpack_left_shift_u32(msg_p->data[1], 24u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pos1 |= unpack_left_shift_u32(msg_p->data[2], 16u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pos1 |= unpack_left_shift_u32(msg_p->data[3], 8u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pos1 |= unpack_right_shift_u32(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch2_hv_pos1 = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch4_hv_pos1 = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->bms_cont_error_dis_ch3_hv_pos1 = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->bms_cont_error_ch2_hv_pos1 = unpack_right_shift_u8(msg_p->data[7], 4u, 0xf0u);
    dst_p->bms_cont_error_ch1_hv_pos1 = unpack_right_shift_u8(msg_p->data[7], 0u, 0x0fu);

    return (0);
}

int fm29_dbc_bms_mai_ncontactor_pos_err_status_init(struct fm29_dbc_bms_mai_ncontactor_pos_err_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_mai_ncontactor_pos_err_status_t));
    msg_p->bms_cont_error_exceed_hv_pos1 = 0;
    msg_p->bms_cont_error_welded_hv_pos1 = 0;
    msg_p->bms_cont_error_stuck_open_hv_pos1 = 0;

    return 0;
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_exceed_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_exceed_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_exceed_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_welded_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_welded_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_welded_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_stuck_open_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_stuck_open_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_stuck_open_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint32_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch1_hv_pos1_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch1_hv_pos1_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch1_hv_pos1_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch2_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch2_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch2_hv_pos1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch4_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch4_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch4_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch3_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch3_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_dis_ch3_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_ch2_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_ch2_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_ch2_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_ch1_hv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_ch1_hv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_pos_err_status_bms_cont_error_ch1_hv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int fm29_dbc_bms_mai_ncontactor_neg_err_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_mai_ncontactor_neg_err_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x3a1u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_exceed_hv_neg1, 3u, 0x08u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_welded_hv_neg1, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_stuck_open_hv_neg1, 1u, 0x02u);
    msg.data[1] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_neg1, 24u, 0xffu);
    msg.data[2] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_neg1, 16u, 0xffu);
    msg.data[3] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_neg1, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u32(src_p->bms_cont_error_dis_ch1_hv_neg1, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch2_hv_neg1, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch4_hv_neg1, 4u, 0xf0u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch3_hv_neg1, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch2_hv_neg1, 4u, 0xf0u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch1_hv_neg1, 0u, 0x0fu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_mai_ncontactor_neg_err_status_unpack(
    struct fm29_dbc_bms_mai_ncontactor_neg_err_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x3a1u)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_error_exceed_hv_neg1 = unpack_right_shift_u8(msg_p->data[0], 3u, 0x08u);
    dst_p->bms_cont_error_welded_hv_neg1 = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->bms_cont_error_stuck_open_hv_neg1 = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_error_dis_ch1_hv_neg1 = unpack_left_shift_u32(msg_p->data[1], 24u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_neg1 |= unpack_left_shift_u32(msg_p->data[2], 16u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_neg1 |= unpack_left_shift_u32(msg_p->data[3], 8u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_neg1 |= unpack_right_shift_u32(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch2_hv_neg1 = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch4_hv_neg1 = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->bms_cont_error_dis_ch3_hv_neg1 = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->bms_cont_error_ch2_hv_neg1 = unpack_right_shift_u8(msg_p->data[7], 4u, 0xf0u);
    dst_p->bms_cont_error_ch1_hv_neg1 = unpack_right_shift_u8(msg_p->data[7], 0u, 0x0fu);

    return (0);
}

int fm29_dbc_bms_mai_ncontactor_neg_err_status_init(struct fm29_dbc_bms_mai_ncontactor_neg_err_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_mai_ncontactor_neg_err_status_t));
    msg_p->bms_cont_error_exceed_hv_neg1 = 0;
    msg_p->bms_cont_error_welded_hv_neg1 = 0;
    msg_p->bms_cont_error_stuck_open_hv_neg1 = 0;

    return 0;
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_exceed_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_exceed_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_exceed_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_welded_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_welded_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_welded_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_stuck_open_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_stuck_open_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_stuck_open_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint32_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch1_hv_neg1_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch1_hv_neg1_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch1_hv_neg1_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch2_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch2_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch2_hv_neg1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch4_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch4_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch4_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch3_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch3_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_dis_ch3_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_ch2_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_ch2_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_ch2_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_ch1_hv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_ch1_hv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_mai_ncontactor_neg_err_status_bms_cont_error_ch1_hv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int fm29_dbc_bms_pre_charge_contactor_err_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_pre_charge_contactor_err_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x3a2u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_exceed_hv_prec, 3u, 0x08u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_welded_hv_prec1, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_stuck_open_hv_prec1, 1u, 0x02u);
    msg.data[1] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_prec, 24u, 0xffu);
    msg.data[2] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_prec, 16u, 0xffu);
    msg.data[3] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_prec, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u32(src_p->bms_cont_error_dis_ch1_hv_prec, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch2_hv_prec, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch4_hv_prec, 4u, 0xf0u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch3_hv_prec, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch2_hv_prec1, 4u, 0xf0u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch1_hv_prec1, 0u, 0x0fu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_pre_charge_contactor_err_status_unpack(
    struct fm29_dbc_bms_pre_charge_contactor_err_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x3a2u)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_error_exceed_hv_prec = unpack_right_shift_u8(msg_p->data[0], 3u, 0x08u);
    dst_p->bms_cont_error_welded_hv_prec1 = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->bms_cont_error_stuck_open_hv_prec1 = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_error_dis_ch1_hv_prec = unpack_left_shift_u32(msg_p->data[1], 24u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_prec |= unpack_left_shift_u32(msg_p->data[2], 16u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_prec |= unpack_left_shift_u32(msg_p->data[3], 8u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_prec |= unpack_right_shift_u32(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch2_hv_prec = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch4_hv_prec = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->bms_cont_error_dis_ch3_hv_prec = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->bms_cont_error_ch2_hv_prec1 = unpack_right_shift_u8(msg_p->data[7], 4u, 0xf0u);
    dst_p->bms_cont_error_ch1_hv_prec1 = unpack_right_shift_u8(msg_p->data[7], 0u, 0x0fu);

    return (0);
}

int fm29_dbc_bms_pre_charge_contactor_err_status_init(struct fm29_dbc_bms_pre_charge_contactor_err_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_pre_charge_contactor_err_status_t));
    msg_p->bms_cont_error_exceed_hv_prec = 0;
    msg_p->bms_cont_error_welded_hv_prec1 = 0;
    msg_p->bms_cont_error_stuck_open_hv_prec1 = 0;

    return 0;
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_exceed_hv_prec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_exceed_hv_prec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_exceed_hv_prec_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_welded_hv_prec1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_welded_hv_prec1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_welded_hv_prec1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_stuck_open_hv_prec1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_stuck_open_hv_prec1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_stuck_open_hv_prec1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint32_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch1_hv_prec_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch1_hv_prec_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch1_hv_prec_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch2_hv_prec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch2_hv_prec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch2_hv_prec_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch4_hv_prec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch4_hv_prec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch4_hv_prec_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch3_hv_prec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch3_hv_prec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_dis_ch3_hv_prec_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_ch2_hv_prec1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_ch2_hv_prec1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_ch2_hv_prec1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_ch1_hv_prec1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_ch1_hv_prec1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_pre_charge_contactor_err_status_bms_cont_error_ch1_hv_prec1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int fm29_dbc_bms_coolant_temp_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_coolant_temp_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x3a5u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_bat_coolant_in, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_bat_coolant_out, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_batt_inl_t_target, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_batt_inl_t_min, 0u, 0xffu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_batt_inl_t_max, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_coolant_temp_unpack(
    struct fm29_dbc_bms_coolant_temp_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x3a5u)) {
        return (-EINVAL);
    }

    dst_p->bms_bat_coolant_in = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->bms_bat_coolant_out = unpack_right_shift_u8(msg_p->data[1], 0u, 0xffu);
    dst_p->bms_batt_inl_t_target = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_batt_inl_t_min = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);
    dst_p->bms_batt_inl_t_max = unpack_right_shift_u8(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_coolant_temp_init(struct fm29_dbc_bms_coolant_temp_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_coolant_temp_t));
    msg_p->bms_bat_coolant_in = 0;
    msg_p->bms_bat_coolant_out = 0;

    return 0;
}

uint8_t fm29_dbc_bms_coolant_temp_bms_bat_coolant_in_encode(double value)
{
    return (uint8_t)((value - -40.0) / 0.5);
}

double fm29_dbc_bms_coolant_temp_bms_bat_coolant_in_decode(uint8_t value)
{
    return (((double)value * 0.5) + -40.0);
}

bool fm29_dbc_bms_coolant_temp_bms_bat_coolant_in_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_coolant_temp_bms_bat_coolant_out_encode(double value)
{
    return (uint8_t)((value - -40.0) / 0.5);
}

double fm29_dbc_bms_coolant_temp_bms_bat_coolant_out_decode(uint8_t value)
{
    return (((double)value * 0.5) + -40.0);
}

bool fm29_dbc_bms_coolant_temp_bms_bat_coolant_out_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_coolant_temp_bms_batt_inl_t_target_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_coolant_temp_bms_batt_inl_t_target_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_coolant_temp_bms_batt_inl_t_target_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_coolant_temp_bms_batt_inl_t_min_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_coolant_temp_bms_batt_inl_t_min_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_coolant_temp_bms_batt_inl_t_min_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_coolant_temp_bms_batt_inl_t_max_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_bms_coolant_temp_bms_batt_inl_t_max_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_bms_coolant_temp_bms_batt_inl_t_max_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_bms_p_vcontactor_neg_err_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_p_vcontactor_neg_err_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x3a6u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_exceed_hv_pv_neg1, 3u, 0x08u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_welded_hv_pv_neg1, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_stuck_open_hv_pv_neg1, 1u, 0x02u);
    msg.data[1] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_neg1, 24u, 0xffu);
    msg.data[2] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_neg1, 16u, 0xffu);
    msg.data[3] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_neg1, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_neg1, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch2_hv_pv_neg1, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch4_hv_pv_neg1, 4u, 0xf0u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch3_hv_pv_neg1, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch2_hv_pv_neg1, 4u, 0xf0u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch1_hv_pv_neg1, 0u, 0x0fu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_p_vcontactor_neg_err_status_unpack(
    struct fm29_dbc_bms_p_vcontactor_neg_err_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x3a6u)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_error_exceed_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[0], 3u, 0x08u);
    dst_p->bms_cont_error_welded_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->bms_cont_error_stuck_open_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_error_dis_ch1_hv_pv_neg1 = unpack_left_shift_u32(msg_p->data[1], 24u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pv_neg1 |= unpack_left_shift_u32(msg_p->data[2], 16u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pv_neg1 |= unpack_left_shift_u32(msg_p->data[3], 8u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pv_neg1 |= unpack_right_shift_u32(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch2_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch4_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->bms_cont_error_dis_ch3_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->bms_cont_error_ch2_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[7], 4u, 0xf0u);
    dst_p->bms_cont_error_ch1_hv_pv_neg1 = unpack_right_shift_u8(msg_p->data[7], 0u, 0x0fu);

    return (0);
}

int fm29_dbc_bms_p_vcontactor_neg_err_status_init(struct fm29_dbc_bms_p_vcontactor_neg_err_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_p_vcontactor_neg_err_status_t));
    msg_p->bms_cont_error_exceed_hv_pv_neg1 = 0;
    msg_p->bms_cont_error_welded_hv_pv_neg1 = 0;
    msg_p->bms_cont_error_stuck_open_hv_pv_neg1 = 0;

    return 0;
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_exceed_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_exceed_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_exceed_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_welded_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_welded_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_welded_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_stuck_open_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_stuck_open_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_stuck_open_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint32_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch1_hv_pv_neg1_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch1_hv_pv_neg1_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch1_hv_pv_neg1_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch2_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch2_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch2_hv_pv_neg1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch4_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch4_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch4_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch3_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch3_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_dis_ch3_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_ch2_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_ch2_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_ch2_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_ch1_hv_pv_neg1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_ch1_hv_pv_neg1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_neg_err_status_bms_cont_error_ch1_hv_pv_neg1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int fm29_dbc_bms_p_vcontactor_pos_err_status_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_p_vcontactor_pos_err_status_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x3a7u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_exceed_hv_pv_pos1, 3u, 0x08u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_welded_hv_pv_pos1, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_cont_error_stuck_open_hv_pv_pos1, 1u, 0x02u);
    msg.data[1] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_pos1, 24u, 0xffu);
    msg.data[2] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_pos1, 16u, 0xffu);
    msg.data[3] |= pack_right_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_pos1, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u32(src_p->bms_cont_error_dis_ch1_hv_pv_pos1, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch2_hv_pv_pos1, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch4_hv_pv_pos1, 4u, 0xf0u);
    msg.data[6] |= pack_left_shift_u8(src_p->bms_cont_error_dis_ch3_hv_pv_pos1, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch2_hv_pv_pos1, 4u, 0xf0u);
    msg.data[7] |= pack_left_shift_u8(src_p->bms_cont_error_ch1_hv_pv_pos1, 0u, 0x0fu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_p_vcontactor_pos_err_status_unpack(
    struct fm29_dbc_bms_p_vcontactor_pos_err_status_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x3a7u)) {
        return (-EINVAL);
    }

    dst_p->bms_cont_error_exceed_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[0], 3u, 0x08u);
    dst_p->bms_cont_error_welded_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->bms_cont_error_stuck_open_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->bms_cont_error_dis_ch1_hv_pv_pos1 = unpack_left_shift_u32(msg_p->data[1], 24u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pv_pos1 |= unpack_left_shift_u32(msg_p->data[2], 16u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pv_pos1 |= unpack_left_shift_u32(msg_p->data[3], 8u, 0xffu);
    dst_p->bms_cont_error_dis_ch1_hv_pv_pos1 |= unpack_right_shift_u32(msg_p->data[4], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch2_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_cont_error_dis_ch4_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->bms_cont_error_dis_ch3_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->bms_cont_error_ch2_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[7], 4u, 0xf0u);
    dst_p->bms_cont_error_ch1_hv_pv_pos1 = unpack_right_shift_u8(msg_p->data[7], 0u, 0x0fu);

    return (0);
}

int fm29_dbc_bms_p_vcontactor_pos_err_status_init(struct fm29_dbc_bms_p_vcontactor_pos_err_status_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_p_vcontactor_pos_err_status_t));
    msg_p->bms_cont_error_exceed_hv_pv_pos1 = 0;
    msg_p->bms_cont_error_welded_hv_pv_pos1 = 0;
    msg_p->bms_cont_error_stuck_open_hv_pv_pos1 = 0;

    return 0;
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_exceed_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_exceed_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_exceed_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_welded_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_welded_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_welded_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_stuck_open_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_stuck_open_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_stuck_open_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint32_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch1_hv_pv_pos1_encode(double value)
{
    return (uint32_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch1_hv_pv_pos1_decode(uint32_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch1_hv_pv_pos1_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch2_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch2_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch2_hv_pv_pos1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch4_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch4_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch4_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch3_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch3_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_dis_ch3_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_ch2_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_ch2_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_ch2_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_ch1_hv_pv_pos1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_ch1_hv_pv_pos1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_p_vcontactor_pos_err_status_bms_cont_error_ch1_hv_pv_pos1_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int fm29_dbc_tbox_0x474_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x474_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x474u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_icc_upd_sched, 0u, 0x03u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_ota_req_obc, 6u, 0xc0u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_ota_req_ecc, 4u, 0x30u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_ota_req_vcu, 2u, 0x0cu);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_ota_req_bms, 0u, 0x03u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_ota_req_fcm, 6u, 0xc0u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_ota_req_adas, 4u, 0x30u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_ota_req_mcu_r, 2u, 0x0cu);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_ota_req_mcu_f, 0u, 0x03u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_ota_req_i_booster, 6u, 0xc0u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_ota_req_esp, 4u, 0x30u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_ota_req_eps, 2u, 0x0cu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_ota_req_gw, 0u, 0x03u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_ota_req_bcm, 6u, 0xc0u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_ota_req_ohc, 4u, 0x30u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_ota_req_icc, 2u, 0x0cu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_ota_req_scm, 0u, 0x03u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_ota_req_trm, 6u, 0xc0u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_ota_req_plgm, 4u, 0x30u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_ota_req_pkc, 2u, 0x0cu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_ota_req_cim, 0u, 0x03u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_ota_req_tbox, 6u, 0xc0u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_ota_req_vsp, 4u, 0x30u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_ota_req_psm, 2u, 0x0cu);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_ota_req_dsmc, 0u, 0x03u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x474_unpack(
    struct fm29_dbc_tbox_0x474_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x474u)) {
        return (-EINVAL);
    }

    dst_p->tbox_icc_upd_sched = unpack_right_shift_u8(msg_p->data[0], 0u, 0x03u);
    dst_p->tbox_ota_req_obc = unpack_right_shift_u8(msg_p->data[2], 6u, 0xc0u);
    dst_p->tbox_ota_req_ecc = unpack_right_shift_u8(msg_p->data[2], 4u, 0x30u);
    dst_p->tbox_ota_req_vcu = unpack_right_shift_u8(msg_p->data[2], 2u, 0x0cu);
    dst_p->tbox_ota_req_bms = unpack_right_shift_u8(msg_p->data[2], 0u, 0x03u);
    dst_p->tbox_ota_req_fcm = unpack_right_shift_u8(msg_p->data[3], 6u, 0xc0u);
    dst_p->tbox_ota_req_adas = unpack_right_shift_u8(msg_p->data[3], 4u, 0x30u);
    dst_p->tbox_ota_req_mcu_r = unpack_right_shift_u8(msg_p->data[3], 2u, 0x0cu);
    dst_p->tbox_ota_req_mcu_f = unpack_right_shift_u8(msg_p->data[3], 0u, 0x03u);
    dst_p->tbox_ota_req_i_booster = unpack_right_shift_u8(msg_p->data[4], 6u, 0xc0u);
    dst_p->tbox_ota_req_esp = unpack_right_shift_u8(msg_p->data[4], 4u, 0x30u);
    dst_p->tbox_ota_req_eps = unpack_right_shift_u8(msg_p->data[4], 2u, 0x0cu);
    dst_p->tbox_ota_req_gw = unpack_right_shift_u8(msg_p->data[4], 0u, 0x03u);
    dst_p->tbox_ota_req_bcm = unpack_right_shift_u8(msg_p->data[5], 6u, 0xc0u);
    dst_p->tbox_ota_req_ohc = unpack_right_shift_u8(msg_p->data[5], 4u, 0x30u);
    dst_p->tbox_ota_req_icc = unpack_right_shift_u8(msg_p->data[5], 2u, 0x0cu);
    dst_p->tbox_ota_req_scm = unpack_right_shift_u8(msg_p->data[5], 0u, 0x03u);
    dst_p->tbox_ota_req_trm = unpack_right_shift_u8(msg_p->data[6], 6u, 0xc0u);
    dst_p->tbox_ota_req_plgm = unpack_right_shift_u8(msg_p->data[6], 4u, 0x30u);
    dst_p->tbox_ota_req_pkc = unpack_right_shift_u8(msg_p->data[6], 2u, 0x0cu);
    dst_p->tbox_ota_req_cim = unpack_right_shift_u8(msg_p->data[6], 0u, 0x03u);
    dst_p->tbox_ota_req_tbox = unpack_right_shift_u8(msg_p->data[7], 6u, 0xc0u);
    dst_p->tbox_ota_req_vsp = unpack_right_shift_u8(msg_p->data[7], 4u, 0x30u);
    dst_p->tbox_ota_req_psm = unpack_right_shift_u8(msg_p->data[7], 2u, 0x0cu);
    dst_p->tbox_ota_req_dsmc = unpack_right_shift_u8(msg_p->data[7], 0u, 0x03u);

    return (0);
}

int fm29_dbc_tbox_0x474_init(struct fm29_dbc_tbox_0x474_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x474_t));
    msg_p->tbox_icc_upd_sched = 0;
    msg_p->tbox_ota_req_obc = 0;
    msg_p->tbox_ota_req_ecc = 0;
    msg_p->tbox_ota_req_vcu = 0;
    msg_p->tbox_ota_req_bms = 0;
    msg_p->tbox_ota_req_fcm = 0;
    msg_p->tbox_ota_req_adas = 0;
    msg_p->tbox_ota_req_mcu_r = 0;
    msg_p->tbox_ota_req_mcu_f = 0;
    msg_p->tbox_ota_req_i_booster = 0;
    msg_p->tbox_ota_req_esp = 0;
    msg_p->tbox_ota_req_eps = 0;
    msg_p->tbox_ota_req_gw = 0;
    msg_p->tbox_ota_req_bcm = 0;
    msg_p->tbox_ota_req_ohc = 0;
    msg_p->tbox_ota_req_icc = 0;
    msg_p->tbox_ota_req_scm = 0;
    msg_p->tbox_ota_req_trm = 0;
    msg_p->tbox_ota_req_plgm = 0;
    msg_p->tbox_ota_req_pkc = 0;
    msg_p->tbox_ota_req_cim = 0;
    msg_p->tbox_ota_req_tbox = 0;
    msg_p->tbox_ota_req_vsp = 0;
    msg_p->tbox_ota_req_psm = 0;
    msg_p->tbox_ota_req_dsmc = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x474_tbox_icc_upd_sched_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_icc_upd_sched_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_icc_upd_sched_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_obc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_obc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_obc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_ecc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_ecc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_ecc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_vcu_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_vcu_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_vcu_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_bms_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_bms_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_bms_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_fcm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_fcm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_fcm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_adas_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_adas_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_adas_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_mcu_r_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_mcu_r_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_mcu_r_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_mcu_f_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_mcu_f_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_mcu_f_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_i_booster_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_i_booster_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_i_booster_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_esp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_esp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_esp_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_eps_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_eps_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_eps_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_gw_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_gw_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_gw_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_bcm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_bcm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_bcm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_ohc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_ohc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_ohc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_icc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_icc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_icc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_scm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_scm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_scm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_trm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_trm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_trm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_plgm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_plgm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_plgm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_pkc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_pkc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_pkc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_cim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_cim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_cim_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_tbox_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_tbox_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_tbox_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_vsp_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_vsp_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_vsp_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_psm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_psm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_psm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x474_tbox_ota_req_dsmc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x474_tbox_ota_req_dsmc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x474_tbox_ota_req_dsmc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int fm29_dbc_eas_0x490_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_eas_0x490_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x490u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[1] |= pack_left_shift_u8(src_p->eas_ctrlr_crt_vld, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->eas_ctrlr_volt_vld, 6u, 0x40u);
    msg.data[1] |= pack_left_shift_u8(src_p->eas_mot_spd_vld, 5u, 0x20u);
    msg.data[2] |= pack_right_shift_u16(src_p->eas_ctrlr_volt, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->eas_ctrlr_volt, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->eas_ctrlr_crt, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->eas_ctrlr_crt, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->eas_mot_spd, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->eas_mot_spd, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_eas_0x490_unpack(
    struct fm29_dbc_eas_0x490_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x490u)) {
        return (-EINVAL);
    }

    dst_p->eas_ctrlr_crt_vld = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->eas_ctrlr_volt_vld = unpack_right_shift_u8(msg_p->data[1], 6u, 0x40u);
    dst_p->eas_mot_spd_vld = unpack_right_shift_u8(msg_p->data[1], 5u, 0x20u);
    dst_p->eas_ctrlr_volt = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->eas_ctrlr_volt |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);
    dst_p->eas_ctrlr_crt = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->eas_ctrlr_crt |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->eas_mot_spd = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->eas_mot_spd |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_eas_0x490_init(struct fm29_dbc_eas_0x490_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_eas_0x490_t));
    msg_p->eas_ctrlr_crt_vld = 0;
    msg_p->eas_ctrlr_volt_vld = 0;
    msg_p->eas_mot_spd_vld = 0;

    return 0;
}

uint8_t fm29_dbc_eas_0x490_eas_ctrlr_crt_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x490_eas_ctrlr_crt_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x490_eas_ctrlr_crt_vld_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x490_eas_ctrlr_volt_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x490_eas_ctrlr_volt_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x490_eas_ctrlr_volt_vld_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x490_eas_mot_spd_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x490_eas_mot_spd_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x490_eas_mot_spd_vld_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_eas_0x490_eas_ctrlr_volt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_eas_0x490_eas_ctrlr_volt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_eas_0x490_eas_ctrlr_volt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_eas_0x490_eas_ctrlr_crt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_eas_0x490_eas_ctrlr_crt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_eas_0x490_eas_ctrlr_crt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_eas_0x490_eas_mot_spd_encode(double value)
{
    return (uint16_t)(value / 0.25);
}

double fm29_dbc_eas_0x490_eas_mot_spd_decode(uint16_t value)
{
    return ((double)value * 0.25);
}

bool fm29_dbc_eas_0x490_eas_mot_spd_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_eas_0x491_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_eas_0x491_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x491u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_right_shift_u16(src_p->eas_mot_crt, 8u, 0xffu);
    msg.data[1] |= pack_left_shift_u16(src_p->eas_mot_crt, 0u, 0xffu);
    msg.data[2] |= pack_left_shift_u8(src_p->eas_inin_sts, 7u, 0x80u);
    msg.data[2] |= pack_left_shift_u8(src_p->eas_crt_sts, 5u, 0x60u);
    msg.data[2] |= pack_left_shift_u8(src_p->eas_hv_over_volt_flt, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->eas_hv_under_volt_flt, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->eas_over_crt_flt, 7u, 0x80u);
    msg.data[4] |= pack_left_shift_u8(src_p->eas_ipm_hw_flt, 4u, 0x10u);
    msg.data[4] |= pack_left_shift_u8(src_p->eas_ctrl_circ_flt, 3u, 0x08u);
    msg.data[4] |= pack_left_shift_u8(src_p->eas_com_lost_ecc, 2u, 0x04u);
    msg.data[4] |= pack_left_shift_u8(src_p->eas_ipmt_over_flt, 1u, 0x02u);
    msg.data[4] |= pack_left_shift_u8(src_p->eas_hv_intlk_flt, 0u, 0x01u);
    msg.data[5] |= pack_left_shift_u8(src_p->eas_ipmt, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->eas_crt_pwr, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->eas_crt_pwr, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_eas_0x491_unpack(
    struct fm29_dbc_eas_0x491_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x491u)) {
        return (-EINVAL);
    }

    dst_p->eas_mot_crt = unpack_left_shift_u16(msg_p->data[0], 8u, 0xffu);
    dst_p->eas_mot_crt |= unpack_right_shift_u16(msg_p->data[1], 0u, 0xffu);
    dst_p->eas_inin_sts = unpack_right_shift_u8(msg_p->data[2], 7u, 0x80u);
    dst_p->eas_crt_sts = unpack_right_shift_u8(msg_p->data[2], 5u, 0x60u);
    dst_p->eas_hv_over_volt_flt = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->eas_hv_under_volt_flt = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->eas_over_crt_flt = unpack_right_shift_u8(msg_p->data[3], 7u, 0x80u);
    dst_p->eas_ipm_hw_flt = unpack_right_shift_u8(msg_p->data[4], 4u, 0x10u);
    dst_p->eas_ctrl_circ_flt = unpack_right_shift_u8(msg_p->data[4], 3u, 0x08u);
    dst_p->eas_com_lost_ecc = unpack_right_shift_u8(msg_p->data[4], 2u, 0x04u);
    dst_p->eas_ipmt_over_flt = unpack_right_shift_u8(msg_p->data[4], 1u, 0x02u);
    dst_p->eas_hv_intlk_flt = unpack_right_shift_u8(msg_p->data[4], 0u, 0x01u);
    dst_p->eas_ipmt = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->eas_crt_pwr = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->eas_crt_pwr |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_eas_0x491_init(struct fm29_dbc_eas_0x491_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_eas_0x491_t));
    msg_p->eas_inin_sts = 0;
    msg_p->eas_crt_sts = 0;
    msg_p->eas_hv_over_volt_flt = 0;
    msg_p->eas_hv_under_volt_flt = 0;
    msg_p->eas_over_crt_flt = 0;
    msg_p->eas_ipm_hw_flt = 0;
    msg_p->eas_ctrl_circ_flt = 0;
    msg_p->eas_com_lost_ecc = 0;
    msg_p->eas_ipmt_over_flt = 0;
    msg_p->eas_hv_intlk_flt = 0;
    msg_p->eas_ipmt = 0;

    return 0;
}

uint16_t fm29_dbc_eas_0x491_eas_mot_crt_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double fm29_dbc_eas_0x491_eas_mot_crt_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool fm29_dbc_eas_0x491_eas_mot_crt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_eas_0x491_eas_inin_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_inin_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_inin_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_crt_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_crt_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_crt_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_eas_0x491_eas_hv_over_volt_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_hv_over_volt_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_hv_over_volt_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_hv_under_volt_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_hv_under_volt_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_hv_under_volt_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_over_crt_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_over_crt_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_over_crt_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_ipm_hw_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_ipm_hw_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_ipm_hw_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_ctrl_circ_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_ctrl_circ_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_ctrl_circ_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_com_lost_ecc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_com_lost_ecc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_com_lost_ecc_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_ipmt_over_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_ipmt_over_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_ipmt_over_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_hv_intlk_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_eas_0x491_eas_hv_intlk_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_eas_0x491_eas_hv_intlk_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_eas_0x491_eas_ipmt_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_eas_0x491_eas_ipmt_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_eas_0x491_eas_ipmt_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_eas_0x491_eas_crt_pwr_encode(double value)
{
    return (uint16_t)(value / 0.2);
}

double fm29_dbc_eas_0x491_eas_crt_pwr_decode(uint16_t value)
{
    return ((double)value * 0.2);
}

bool fm29_dbc_eas_0x491_eas_crt_pwr_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x4_f4_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x4_f4_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x4f4u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 10u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_4_f4_4_f8_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_sw_upd, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_4_f4_4_f8_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_fobd_gw_part_busuds_com, 6u, 0xc0u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_rem_flsh, 3u, 0x38u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_flsflg, 0u, 0x07u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_rem_kl15_pwr_on_req, 6u, 0xc0u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_resv_ac_chrg_open_sts, 4u, 0x30u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_ehu_set_trvl_mod, 2u, 0x0cu);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_rem_chrg_insul_fct_req, 0u, 0x03u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_set_chrg_end_soc, 0u, 0x7fu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_icc_upd_strt, 6u, 0xc0u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_blow_lvl_req, 3u, 0x38u);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_pre_cond_trigger_req, 0u, 0x07u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_crash_cfm, 4u, 0x30u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_vehi_mod, 0u, 0x0fu);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_sched_chrgn_req, 0u, 0x03u);
    msg.data[8] |= pack_left_shift_u8(src_p->tbox_4_f4_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[9] |= pack_left_shift_u8(src_p->tbox_4_f4_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[10] |= pack_left_shift_u8(src_p->tbox_4_f4_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[11] |= pack_left_shift_u8(src_p->tbox_4_f4_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (16);
}

int fm29_dbc_tbox_0x4_f4_unpack(
    struct fm29_dbc_tbox_0x4_f4_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 10u) || (msg_p->id != 0x4f4u)) {
        return (-EINVAL);
    }

    dst_p->tbox_4_f4_4_f8_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->tbox_sw_upd = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->tbox_4_f4_4_f8_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->tbox_fobd_gw_part_busuds_com = unpack_right_shift_u8(msg_p->data[2], 6u, 0xc0u);
    dst_p->tbox_rem_flsh = unpack_right_shift_u8(msg_p->data[2], 3u, 0x38u);
    dst_p->tbox_flsflg = unpack_right_shift_u8(msg_p->data[2], 0u, 0x07u);
    dst_p->tbox_rem_kl15_pwr_on_req = unpack_right_shift_u8(msg_p->data[3], 6u, 0xc0u);
    dst_p->tbox_resv_ac_chrg_open_sts = unpack_right_shift_u8(msg_p->data[3], 4u, 0x30u);
    dst_p->tbox_ehu_set_trvl_mod = unpack_right_shift_u8(msg_p->data[3], 2u, 0x0cu);
    dst_p->tbox_rem_chrg_insul_fct_req = unpack_right_shift_u8(msg_p->data[3], 0u, 0x03u);
    dst_p->tbox_set_chrg_end_soc = unpack_right_shift_u8(msg_p->data[4], 0u, 0x7fu);
    dst_p->tbox_icc_upd_strt = unpack_right_shift_u8(msg_p->data[5], 6u, 0xc0u);
    dst_p->tbox_blow_lvl_req = unpack_right_shift_u8(msg_p->data[5], 3u, 0x38u);
    dst_p->tbox_pre_cond_trigger_req = unpack_right_shift_u8(msg_p->data[5], 0u, 0x07u);
    dst_p->tbox_crash_cfm = unpack_right_shift_u8(msg_p->data[6], 4u, 0x30u);
    dst_p->tbox_vehi_mod = unpack_right_shift_u8(msg_p->data[6], 0u, 0x0fu);
    dst_p->tbox_sched_chrgn_req = unpack_right_shift_u8(msg_p->data[7], 0u, 0x03u);
    dst_p->tbox_4_f4_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[8], 0u, 0xffu);
    dst_p->tbox_4_f4_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[9], 0u, 0xffu);
    dst_p->tbox_4_f4_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[10], 0u, 0xffu);
    dst_p->tbox_4_f4_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[11], 0u, 0xffu);

    return (0);
}

int fm29_dbc_tbox_0x4_f4_init(struct fm29_dbc_tbox_0x4_f4_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x4_f4_t));
    msg_p->tbox_sw_upd = 0;
    msg_p->tbox_fobd_gw_part_busuds_com = 0;
    msg_p->tbox_rem_flsh = 0;
    msg_p->tbox_flsflg = 0;
    msg_p->tbox_rem_kl15_pwr_on_req = 0;
    msg_p->tbox_resv_ac_chrg_open_sts = 0;
    msg_p->tbox_ehu_set_trvl_mod = 0;
    msg_p->tbox_rem_chrg_insul_fct_req = 0;
    msg_p->tbox_icc_upd_strt = 0;
    msg_p->tbox_blow_lvl_req = 0;
    msg_p->tbox_pre_cond_trigger_req = 0;
    msg_p->tbox_crash_cfm = 0;
    msg_p->tbox_vehi_mod = 0;
    msg_p->tbox_sched_chrgn_req = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_4_f4_4_f8_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_4_f4_4_f8_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_4_f4_4_f8_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_sw_upd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_sw_upd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_sw_upd_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_4_f4_4_f8_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_4_f4_4_f8_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_4_f4_4_f8_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_fobd_gw_part_busuds_com_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_fobd_gw_part_busuds_com_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_fobd_gw_part_busuds_com_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_rem_flsh_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_rem_flsh_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_rem_flsh_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_flsflg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_flsflg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_flsflg_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_rem_kl15_pwr_on_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_rem_kl15_pwr_on_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_rem_kl15_pwr_on_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_resv_ac_chrg_open_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_resv_ac_chrg_open_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_resv_ac_chrg_open_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_ehu_set_trvl_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_ehu_set_trvl_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_ehu_set_trvl_mod_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_rem_chrg_insul_fct_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_rem_chrg_insul_fct_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_rem_chrg_insul_fct_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_set_chrg_end_soc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_set_chrg_end_soc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_set_chrg_end_soc_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_icc_upd_strt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_icc_upd_strt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_icc_upd_strt_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_blow_lvl_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_blow_lvl_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_blow_lvl_req_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_pre_cond_trigger_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_pre_cond_trigger_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_pre_cond_trigger_req_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_crash_cfm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_crash_cfm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_crash_cfm_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_vehi_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_vehi_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_vehi_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_sched_chrgn_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_sched_chrgn_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_sched_chrgn_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f4_tbox_4_f4_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x4_f9_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x4_f9_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x4f9u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[1] |= pack_left_shift_u8(src_p->tbox_ota_res_fb, 4u, 0x70u);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_spd_lim, 0u, 0xffu);
    msg.data[3] |= pack_right_shift_u16(src_p->tbox_ota_ti_rng, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u16(src_p->tbox_ota_ti_rng, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x4_f9_unpack(
    struct fm29_dbc_tbox_0x4_f9_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x4f9u)) {
        return (-EINVAL);
    }

    dst_p->tbox_ota_res_fb = unpack_right_shift_u8(msg_p->data[1], 4u, 0x70u);
    dst_p->tbox_spd_lim = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->tbox_ota_ti_rng = unpack_left_shift_u16(msg_p->data[3], 8u, 0xffu);
    dst_p->tbox_ota_ti_rng |= unpack_right_shift_u16(msg_p->data[4], 0u, 0xffu);

    return (0);
}

int fm29_dbc_tbox_0x4_f9_init(struct fm29_dbc_tbox_0x4_f9_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x4_f9_t));
    msg_p->tbox_ota_res_fb = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x4_f9_tbox_ota_res_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f9_tbox_ota_res_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f9_tbox_ota_res_fb_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x4_f9_tbox_spd_lim_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x4_f9_tbox_spd_lim_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f9_tbox_spd_lim_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_tbox_0x4_f9_tbox_ota_ti_rng_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_tbox_0x4_f9_tbox_ota_ti_rng_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x4_f9_tbox_ota_ti_rng_is_in_range(uint16_t value)
{
    return (value <= 65534u);
}

int fm29_dbc_vcu_0x507_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_vcu_0x507_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x507u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->vcu_ota_veh_cdn_chk_qm_sts, 6u, 0xc0u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_ota_veh_inhb_qm_fb, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_drvr_mot_over_t_flt_gb, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_mcu_over_t_flt_gb, 6u, 0x40u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_veh_sts_gb, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_cllsn_sig_sts, 1u, 0x02u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_drv_avl, 0u, 0x01u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_mst_rly_ctrl_cmd, 7u, 0x80u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_pwr_batt_ecc_ena_cmd, 6u, 0x40u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_dcdc_ena_cmd, 4u, 0x10u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_soc_too_hi_alrm, 3u, 0x08u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_pwr_batt_pack_mismat_alrm, 2u, 0x04u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_soc_jump_alrm, 1u, 0x02u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_soc_too_lo_alrm, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_dcdc_outp_volt_cmd, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_cc_cnctn_volt, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->vcu_drvr_mot_nr_gb, 4u, 0xf0u);
    msg.data[5] |= pack_left_shift_u8(src_p->vcu_gear_sig_gb, 0u, 0x0fu);
    msg.data[6] |= pack_right_shift_u16(src_p->vcu_batt_volt, 8u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->vcu_batt_volt, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_vcu_0x507_unpack(
    struct fm29_dbc_vcu_0x507_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x507u)) {
        return (-EINVAL);
    }

    dst_p->vcu_ota_veh_cdn_chk_qm_sts = unpack_right_shift_u8(msg_p->data[0], 6u, 0xc0u);
    dst_p->vcu_ota_veh_inhb_qm_fb = unpack_right_shift_u8(msg_p->data[0], 4u, 0x30u);
    dst_p->vcu_drvr_mot_over_t_flt_gb = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->vcu_mcu_over_t_flt_gb = unpack_right_shift_u8(msg_p->data[1], 6u, 0x40u);
    dst_p->vcu_veh_sts_gb = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->vcu_cllsn_sig_sts = unpack_right_shift_u8(msg_p->data[1], 1u, 0x02u);
    dst_p->vcu_drv_avl = unpack_right_shift_u8(msg_p->data[1], 0u, 0x01u);
    dst_p->vcu_mst_rly_ctrl_cmd = unpack_right_shift_u8(msg_p->data[2], 7u, 0x80u);
    dst_p->vcu_pwr_batt_ecc_ena_cmd = unpack_right_shift_u8(msg_p->data[2], 6u, 0x40u);
    dst_p->vcu_dcdc_ena_cmd = unpack_right_shift_u8(msg_p->data[2], 4u, 0x10u);
    dst_p->vcu_soc_too_hi_alrm = unpack_right_shift_u8(msg_p->data[2], 3u, 0x08u);
    dst_p->vcu_pwr_batt_pack_mismat_alrm = unpack_right_shift_u8(msg_p->data[2], 2u, 0x04u);
    dst_p->vcu_soc_jump_alrm = unpack_right_shift_u8(msg_p->data[2], 1u, 0x02u);
    dst_p->vcu_soc_too_lo_alrm = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->vcu_dcdc_outp_volt_cmd = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->vcu_cc_cnctn_volt = unpack_right_shift_u8(msg_p->data[4], 0u, 0xffu);
    dst_p->vcu_drvr_mot_nr_gb = unpack_right_shift_u8(msg_p->data[5], 4u, 0xf0u);
    dst_p->vcu_gear_sig_gb = unpack_right_shift_u8(msg_p->data[5], 0u, 0x0fu);
    dst_p->vcu_batt_volt = unpack_left_shift_u16(msg_p->data[6], 8u, 0xffu);
    dst_p->vcu_batt_volt |= unpack_right_shift_u16(msg_p->data[7], 0u, 0xffu);

    return (0);
}

int fm29_dbc_vcu_0x507_init(struct fm29_dbc_vcu_0x507_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_vcu_0x507_t));
    msg_p->vcu_ota_veh_cdn_chk_qm_sts = 0;
    msg_p->vcu_ota_veh_inhb_qm_fb = 0;
    msg_p->vcu_drvr_mot_over_t_flt_gb = 0;
    msg_p->vcu_mcu_over_t_flt_gb = 0;
    msg_p->vcu_veh_sts_gb = 0;
    msg_p->vcu_cllsn_sig_sts = 0;
    msg_p->vcu_drv_avl = 0;
    msg_p->vcu_mst_rly_ctrl_cmd = 0;
    msg_p->vcu_pwr_batt_ecc_ena_cmd = 0;
    msg_p->vcu_dcdc_ena_cmd = 0;
    msg_p->vcu_soc_too_hi_alrm = 0;
    msg_p->vcu_pwr_batt_pack_mismat_alrm = 0;
    msg_p->vcu_soc_jump_alrm = 0;
    msg_p->vcu_soc_too_lo_alrm = 0;
    msg_p->vcu_drvr_mot_nr_gb = 0;
    msg_p->vcu_gear_sig_gb = 0;

    return 0;
}

uint8_t fm29_dbc_vcu_0x507_vcu_ota_veh_cdn_chk_qm_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_ota_veh_cdn_chk_qm_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_ota_veh_cdn_chk_qm_sts_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_ota_veh_inhb_qm_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_ota_veh_inhb_qm_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_ota_veh_inhb_qm_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_drvr_mot_over_t_flt_gb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_drvr_mot_over_t_flt_gb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_drvr_mot_over_t_flt_gb_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_mcu_over_t_flt_gb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_mcu_over_t_flt_gb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_mcu_over_t_flt_gb_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_veh_sts_gb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_veh_sts_gb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_veh_sts_gb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_cllsn_sig_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_cllsn_sig_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_cllsn_sig_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_drv_avl_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_drv_avl_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_drv_avl_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_mst_rly_ctrl_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_mst_rly_ctrl_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_mst_rly_ctrl_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_pwr_batt_ecc_ena_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_pwr_batt_ecc_ena_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_pwr_batt_ecc_ena_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_dcdc_ena_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_dcdc_ena_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_dcdc_ena_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_soc_too_hi_alrm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_soc_too_hi_alrm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_soc_too_hi_alrm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_pwr_batt_pack_mismat_alrm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_pwr_batt_pack_mismat_alrm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_pwr_batt_pack_mismat_alrm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_soc_jump_alrm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_soc_jump_alrm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_soc_jump_alrm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_soc_too_lo_alrm_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_soc_too_lo_alrm_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_soc_too_lo_alrm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_dcdc_outp_volt_cmd_encode(double value)
{
    return (uint8_t)(value / 0.1);
}

double fm29_dbc_vcu_0x507_vcu_dcdc_outp_volt_cmd_decode(uint8_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_vcu_0x507_vcu_dcdc_outp_volt_cmd_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x507_vcu_cc_cnctn_volt_encode(double value)
{
    return (uint8_t)(value / 0.1);
}

double fm29_dbc_vcu_0x507_vcu_cc_cnctn_volt_decode(uint8_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_vcu_0x507_vcu_cc_cnctn_volt_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_vcu_0x507_vcu_drvr_mot_nr_gb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_drvr_mot_nr_gb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_drvr_mot_nr_gb_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x507_vcu_gear_sig_gb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x507_vcu_gear_sig_gb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x507_vcu_gear_sig_gb_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint16_t fm29_dbc_vcu_0x507_vcu_batt_volt_encode(double value)
{
    return (uint16_t)(value / 0.001);
}

double fm29_dbc_vcu_0x507_vcu_batt_volt_decode(uint16_t value)
{
    return ((double)value * 0.001);
}

bool fm29_dbc_vcu_0x507_vcu_batt_volt_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_vcu_0x511_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_vcu_0x511_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x511u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->vcu_veh_eol_fct_flg, 7u, 0x80u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_lv_wake_up_sts_pdu, 6u, 0x40u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_net_wake_up_sig, 5u, 0x20u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_rem_wake_up_sig, 4u, 0x10u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_sc_wake_up_sig, 3u, 0x08u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_fc_wake_up_sig, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_on_wake_up_sig, 1u, 0x02u);
    msg.data[0] |= pack_left_shift_u8(src_p->vcu_bmslv_wake_up_sts, 0u, 0x01u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_rem_chrg_end_cmd, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_rem_pwr_batt_heatg_end_cmd, 6u, 0x40u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_ev_chrg_electc_lock_ctrl_cmd, 4u, 0x30u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_rem_ecc_end_cmd, 3u, 0x08u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_lv_wake_up_sts_ccu, 2u, 0x04u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_pwr_antithef_allwt_rdy_flg, 1u, 0x02u);
    msg.data[1] |= pack_left_shift_u8(src_p->vcu_lv_wake_up_sts_mcu, 0u, 0x01u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_v2_l_chrg_port_avl, 7u, 0x80u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_rem_ecc_end_reason, 4u, 0x70u);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_rem_batt_heatg_fail_reason, 1u, 0x0eu);
    msg.data[2] |= pack_left_shift_u8(src_p->vcu_v2_l_tr_avl, 0u, 0x01u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_v2_g_avl, 7u, 0x80u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_v2_h_avl, 6u, 0x40u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_v2_v_avl, 5u, 0x20u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_sched_chrgn_sts_fb, 3u, 0x18u);
    msg.data[3] |= pack_left_shift_u8(src_p->vcu_rem_chrg_end_reason, 0u, 0x07u);
    msg.data[4] |= pack_left_shift_u8(src_p->vcu_veh_mod, 4u, 0xf0u);
    msg.data[5] |= pack_left_shift_u8(src_p->vcu_veh_crt_chrg_end_soc, 0u, 0x7fu);
    msg.data[6] |= pack_left_shift_u8(src_p->vcu_rem_pwr_batt_preheatg_end_flg, 5u, 0x20u);
    msg.data[6] |= pack_left_shift_u8(src_p->vcu_cal_sw_vers, 0u, 0x1fu);
    msg.data[7] |= pack_left_shift_u8(src_p->vcu_rem_dtc_pwr_on_req, 7u, 0x80u);
    msg.data[7] |= pack_left_shift_u8(src_p->vcu_veh_rem_refrsh_mod_req, 5u, 0x60u);
    msg.data[7] |= pack_left_shift_u8(src_p->vcu_veh_oper_mod, 0u, 0x1fu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_vcu_0x511_unpack(
    struct fm29_dbc_vcu_0x511_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x511u)) {
        return (-EINVAL);
    }

    dst_p->vcu_veh_eol_fct_flg = unpack_right_shift_u8(msg_p->data[0], 7u, 0x80u);
    dst_p->vcu_lv_wake_up_sts_pdu = unpack_right_shift_u8(msg_p->data[0], 6u, 0x40u);
    dst_p->vcu_net_wake_up_sig = unpack_right_shift_u8(msg_p->data[0], 5u, 0x20u);
    dst_p->vcu_rem_wake_up_sig = unpack_right_shift_u8(msg_p->data[0], 4u, 0x10u);
    dst_p->vcu_sc_wake_up_sig = unpack_right_shift_u8(msg_p->data[0], 3u, 0x08u);
    dst_p->vcu_fc_wake_up_sig = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->vcu_on_wake_up_sig = unpack_right_shift_u8(msg_p->data[0], 1u, 0x02u);
    dst_p->vcu_bmslv_wake_up_sts = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->vcu_rem_chrg_end_cmd = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->vcu_rem_pwr_batt_heatg_end_cmd = unpack_right_shift_u8(msg_p->data[1], 6u, 0x40u);
    dst_p->vcu_ev_chrg_electc_lock_ctrl_cmd = unpack_right_shift_u8(msg_p->data[1], 4u, 0x30u);
    dst_p->vcu_rem_ecc_end_cmd = unpack_right_shift_u8(msg_p->data[1], 3u, 0x08u);
    dst_p->vcu_lv_wake_up_sts_ccu = unpack_right_shift_u8(msg_p->data[1], 2u, 0x04u);
    dst_p->vcu_pwr_antithef_allwt_rdy_flg = unpack_right_shift_u8(msg_p->data[1], 1u, 0x02u);
    dst_p->vcu_lv_wake_up_sts_mcu = unpack_right_shift_u8(msg_p->data[1], 0u, 0x01u);
    dst_p->vcu_v2_l_chrg_port_avl = unpack_right_shift_u8(msg_p->data[2], 7u, 0x80u);
    dst_p->vcu_rem_ecc_end_reason = unpack_right_shift_u8(msg_p->data[2], 4u, 0x70u);
    dst_p->vcu_rem_batt_heatg_fail_reason = unpack_right_shift_u8(msg_p->data[2], 1u, 0x0eu);
    dst_p->vcu_v2_l_tr_avl = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->vcu_v2_g_avl = unpack_right_shift_u8(msg_p->data[3], 7u, 0x80u);
    dst_p->vcu_v2_h_avl = unpack_right_shift_u8(msg_p->data[3], 6u, 0x40u);
    dst_p->vcu_v2_v_avl = unpack_right_shift_u8(msg_p->data[3], 5u, 0x20u);
    dst_p->vcu_sched_chrgn_sts_fb = unpack_right_shift_u8(msg_p->data[3], 3u, 0x18u);
    dst_p->vcu_rem_chrg_end_reason = unpack_right_shift_u8(msg_p->data[3], 0u, 0x07u);
    dst_p->vcu_veh_mod = unpack_right_shift_u8(msg_p->data[4], 4u, 0xf0u);
    dst_p->vcu_veh_crt_chrg_end_soc = unpack_right_shift_u8(msg_p->data[5], 0u, 0x7fu);
    dst_p->vcu_rem_pwr_batt_preheatg_end_flg = unpack_right_shift_u8(msg_p->data[6], 5u, 0x20u);
    dst_p->vcu_cal_sw_vers = unpack_right_shift_u8(msg_p->data[6], 0u, 0x1fu);
    dst_p->vcu_rem_dtc_pwr_on_req = unpack_right_shift_u8(msg_p->data[7], 7u, 0x80u);
    dst_p->vcu_veh_rem_refrsh_mod_req = unpack_right_shift_u8(msg_p->data[7], 5u, 0x60u);
    dst_p->vcu_veh_oper_mod = unpack_right_shift_u8(msg_p->data[7], 0u, 0x1fu);

    return (0);
}

int fm29_dbc_vcu_0x511_init(struct fm29_dbc_vcu_0x511_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_vcu_0x511_t));
    msg_p->vcu_veh_eol_fct_flg = 0;
    msg_p->vcu_lv_wake_up_sts_pdu = 0;
    msg_p->vcu_net_wake_up_sig = 0;
    msg_p->vcu_rem_wake_up_sig = 0;
    msg_p->vcu_sc_wake_up_sig = 0;
    msg_p->vcu_fc_wake_up_sig = 0;
    msg_p->vcu_on_wake_up_sig = 0;
    msg_p->vcu_bmslv_wake_up_sts = 0;
    msg_p->vcu_rem_chrg_end_cmd = 0;
    msg_p->vcu_rem_pwr_batt_heatg_end_cmd = 0;
    msg_p->vcu_ev_chrg_electc_lock_ctrl_cmd = 0;
    msg_p->vcu_rem_ecc_end_cmd = 0;
    msg_p->vcu_lv_wake_up_sts_ccu = 0;
    msg_p->vcu_pwr_antithef_allwt_rdy_flg = 0;
    msg_p->vcu_lv_wake_up_sts_mcu = 0;
    msg_p->vcu_v2_l_chrg_port_avl = 0;
    msg_p->vcu_rem_ecc_end_reason = 0;
    msg_p->vcu_rem_batt_heatg_fail_reason = 0;
    msg_p->vcu_v2_l_tr_avl = 0;
    msg_p->vcu_v2_g_avl = 0;
    msg_p->vcu_v2_h_avl = 0;
    msg_p->vcu_v2_v_avl = 0;
    msg_p->vcu_sched_chrgn_sts_fb = 0;
    msg_p->vcu_rem_chrg_end_reason = 0;
    msg_p->vcu_veh_mod = 14;
    msg_p->vcu_rem_pwr_batt_preheatg_end_flg = 0;
    msg_p->vcu_cal_sw_vers = 0;
    msg_p->vcu_rem_dtc_pwr_on_req = 0;
    msg_p->vcu_veh_rem_refrsh_mod_req = 0;
    msg_p->vcu_veh_oper_mod = 0;

    return 0;
}

uint8_t fm29_dbc_vcu_0x511_vcu_veh_eol_fct_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_veh_eol_fct_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_veh_eol_fct_flg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_pdu_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_pdu_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_pdu_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_net_wake_up_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_net_wake_up_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_net_wake_up_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_wake_up_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_wake_up_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_wake_up_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_sc_wake_up_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_sc_wake_up_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_sc_wake_up_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_fc_wake_up_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_fc_wake_up_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_fc_wake_up_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_on_wake_up_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_on_wake_up_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_on_wake_up_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_bmslv_wake_up_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_bmslv_wake_up_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_bmslv_wake_up_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_chrg_end_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_chrg_end_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_chrg_end_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_pwr_batt_heatg_end_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_pwr_batt_heatg_end_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_pwr_batt_heatg_end_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_ev_chrg_electc_lock_ctrl_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_ev_chrg_electc_lock_ctrl_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_ev_chrg_electc_lock_ctrl_cmd_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_ecc_end_cmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_ecc_end_cmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_ecc_end_cmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_ccu_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_ccu_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_ccu_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_pwr_antithef_allwt_rdy_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_pwr_antithef_allwt_rdy_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_pwr_antithef_allwt_rdy_flg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_mcu_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_mcu_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_lv_wake_up_sts_mcu_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_v2_l_chrg_port_avl_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_v2_l_chrg_port_avl_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_v2_l_chrg_port_avl_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_ecc_end_reason_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_ecc_end_reason_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_ecc_end_reason_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_batt_heatg_fail_reason_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_batt_heatg_fail_reason_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_batt_heatg_fail_reason_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_v2_l_tr_avl_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_v2_l_tr_avl_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_v2_l_tr_avl_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_v2_g_avl_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_v2_g_avl_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_v2_g_avl_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_v2_h_avl_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_v2_h_avl_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_v2_h_avl_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_v2_v_avl_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_v2_v_avl_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_v2_v_avl_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_sched_chrgn_sts_fb_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_sched_chrgn_sts_fb_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_sched_chrgn_sts_fb_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_chrg_end_reason_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_chrg_end_reason_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_chrg_end_reason_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_veh_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_veh_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_veh_mod_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_veh_crt_chrg_end_soc_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_veh_crt_chrg_end_soc_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_veh_crt_chrg_end_soc_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_pwr_batt_preheatg_end_flg_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_pwr_batt_preheatg_end_flg_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_pwr_batt_preheatg_end_flg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_cal_sw_vers_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_cal_sw_vers_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_cal_sw_vers_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_rem_dtc_pwr_on_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_rem_dtc_pwr_on_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_rem_dtc_pwr_on_req_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_veh_rem_refrsh_mod_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_veh_rem_refrsh_mod_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_veh_rem_refrsh_mod_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_vcu_0x511_vcu_veh_oper_mod_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_vcu_0x511_vcu_veh_oper_mod_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_vcu_0x511_vcu_veh_oper_mod_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

int fm29_dbc_icc_0x531_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_icc_0x531_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x531u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->icc_tot_milg_vld_odo, 0u, 0x01u);
    msg.data[1] |= pack_right_shift_u32(src_p->icc_tot_milg_odo, 24u, 0x0fu);
    msg.data[2] |= pack_right_shift_u32(src_p->icc_tot_milg_odo, 16u, 0xffu);
    msg.data[3] |= pack_right_shift_u32(src_p->icc_tot_milg_odo, 8u, 0xffu);
    msg.data[4] |= pack_left_shift_u32(src_p->icc_tot_milg_odo, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->icc_disp_veh_spd, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->icc_workshop_mode, 6u, 0xc0u);
    msg.data[6] |= pack_left_shift_u8(src_p->icc_disp_flt, 3u, 0x08u);
    msg.data[6] |= pack_left_shift_u8(src_p->icc_adas_sig_flt, 1u, 0x06u);
    msg.data[6] |= pack_left_shift_u8(src_p->icc_disp_veh_spd_unit, 0u, 0x01u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_icc_0x531_unpack(
    struct fm29_dbc_icc_0x531_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x531u)) {
        return (-EINVAL);
    }

    dst_p->icc_tot_milg_vld_odo = unpack_right_shift_u8(msg_p->data[0], 0u, 0x01u);
    dst_p->icc_tot_milg_odo = unpack_left_shift_u32(msg_p->data[1], 24u, 0x0fu);
    dst_p->icc_tot_milg_odo |= unpack_left_shift_u32(msg_p->data[2], 16u, 0xffu);
    dst_p->icc_tot_milg_odo |= unpack_left_shift_u32(msg_p->data[3], 8u, 0xffu);
    dst_p->icc_tot_milg_odo |= unpack_right_shift_u32(msg_p->data[4], 0u, 0xffu);
    dst_p->icc_disp_veh_spd = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->icc_workshop_mode = unpack_right_shift_u8(msg_p->data[6], 6u, 0xc0u);
    dst_p->icc_disp_flt = unpack_right_shift_u8(msg_p->data[6], 3u, 0x08u);
    dst_p->icc_adas_sig_flt = unpack_right_shift_u8(msg_p->data[6], 1u, 0x06u);
    dst_p->icc_disp_veh_spd_unit = unpack_right_shift_u8(msg_p->data[6], 0u, 0x01u);

    return (0);
}

int fm29_dbc_icc_0x531_init(struct fm29_dbc_icc_0x531_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_icc_0x531_t));
    msg_p->icc_tot_milg_vld_odo = 0;
    msg_p->icc_workshop_mode = 0;
    msg_p->icc_disp_flt = 0;
    msg_p->icc_adas_sig_flt = 0;
    msg_p->icc_disp_veh_spd_unit = 0;

    return 0;
}

uint8_t fm29_dbc_icc_0x531_icc_tot_milg_vld_odo_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_icc_0x531_icc_tot_milg_vld_odo_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_icc_0x531_icc_tot_milg_vld_odo_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint32_t fm29_dbc_icc_0x531_icc_tot_milg_odo_encode(double value)
{
    return (uint32_t)(value / 0.01);
}

double fm29_dbc_icc_0x531_icc_tot_milg_odo_decode(uint32_t value)
{
    return ((double)value * 0.01);
}

bool fm29_dbc_icc_0x531_icc_tot_milg_odo_is_in_range(uint32_t value)
{
    return (value <= 200000000u);
}

uint8_t fm29_dbc_icc_0x531_icc_disp_veh_spd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_icc_0x531_icc_disp_veh_spd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_icc_0x531_icc_disp_veh_spd_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_icc_0x531_icc_workshop_mode_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_icc_0x531_icc_workshop_mode_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_icc_0x531_icc_workshop_mode_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_icc_0x531_icc_disp_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_icc_0x531_icc_disp_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_icc_0x531_icc_disp_flt_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_icc_0x531_icc_adas_sig_flt_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_icc_0x531_icc_adas_sig_flt_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_icc_0x531_icc_adas_sig_flt_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_icc_0x531_icc_disp_veh_spd_unit_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_icc_0x531_icc_disp_veh_spd_unit_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_icc_0x531_icc_disp_veh_spd_unit_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int fm29_dbc_bms_charging_time_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_charging_time_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x595u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_right_shift_u16(src_p->bms_rm_chrg_ti_full_chrg, 8u, 0xffu);
    msg.data[1] |= pack_left_shift_u16(src_p->bms_rm_chrg_ti_full_chrg, 0u, 0xffu);
    msg.data[2] |= pack_right_shift_u16(src_p->bms_rm_chrg_ti_trgt_so_c, 8u, 0xffu);
    msg.data[3] |= pack_left_shift_u16(src_p->bms_rm_chrg_ti_trgt_so_c, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_charging_time_unpack(
    struct fm29_dbc_bms_charging_time_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x595u)) {
        return (-EINVAL);
    }

    dst_p->bms_rm_chrg_ti_full_chrg = unpack_left_shift_u16(msg_p->data[0], 8u, 0xffu);
    dst_p->bms_rm_chrg_ti_full_chrg |= unpack_right_shift_u16(msg_p->data[1], 0u, 0xffu);
    dst_p->bms_rm_chrg_ti_trgt_so_c = unpack_left_shift_u16(msg_p->data[2], 8u, 0xffu);
    dst_p->bms_rm_chrg_ti_trgt_so_c |= unpack_right_shift_u16(msg_p->data[3], 0u, 0xffu);

    return (0);
}

int fm29_dbc_bms_charging_time_init(struct fm29_dbc_bms_charging_time_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_charging_time_t));

    return 0;
}

uint16_t fm29_dbc_bms_charging_time_bms_rm_chrg_ti_full_chrg_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_charging_time_bms_rm_chrg_ti_full_chrg_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_charging_time_bms_rm_chrg_ti_full_chrg_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_charging_time_bms_rm_chrg_ti_trgt_so_c_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_bms_charging_time_bms_rm_chrg_ti_trgt_so_c_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_charging_time_bms_rm_chrg_ti_trgt_so_c_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x5_c4_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x5_c4_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x5c4u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 10u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_rem_pwr_batt_resv_heatg_req, 7u, 0x80u);
    msg.data[0] |= pack_left_shift_u8(src_p->tbox_rem_pwr_batt_open_heatg_req, 5u, 0x60u);
    msg.data[0] |= pack_left_shift_u8(src_p->tbox_rem_sc_mod_req, 3u, 0x18u);
    msg.data[0] |= pack_left_shift_u8(src_p->tbox_terminal_rem_wakeup_sig, 2u, 0x04u);
    msg.data[0] |= pack_left_shift_u8(src_p->tbox_ota_own_condchk, 0u, 0x03u);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_rem_ecc_resv_defrst_req, 7u, 0x80u);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_rem_ecc_defrst_mod_req, 5u, 0x60u);
    msg.data[1] |= pack_left_shift_u8(src_p->tbox_rem_insd_info_disp_ena, 4u, 0x10u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_rem_ecc_set_t, 0u, 0xffu);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_rem_resv_ecc_set_t, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_rem_soc_max, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_wifi_error, 7u, 0x80u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_ehu_not_conn, 6u, 0x40u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_tsp_not_conn, 5u, 0x20u);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_conn_typ, 2u, 0x1cu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_4_g_sig_ind, 0u, 0x03u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_ota_inhb_req, 6u, 0xc0u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_rem_swh_req, 4u, 0x30u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_4_g_loss, 3u, 0x08u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_volt_high, 2u, 0x04u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_volt_low, 1u, 0x02u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_inner_batt_error, 0u, 0x01u);
    msg.data[8] |= pack_left_shift_u8(src_p->tbox_5_c4_s_sec_oc_fresh_byte0, 0u, 0xffu);
    msg.data[9] |= pack_left_shift_u8(src_p->tbox_5_c4_s_sec_oc_mac_byte0, 0u, 0xffu);
    msg.data[10] |= pack_left_shift_u8(src_p->tbox_5_c4_s_sec_oc_mac_byte1, 0u, 0xffu);
    msg.data[11] |= pack_left_shift_u8(src_p->tbox_5_c4_s_sec_oc_mac_byte2, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (16);
}

int fm29_dbc_tbox_0x5_c4_unpack(
    struct fm29_dbc_tbox_0x5_c4_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 10u) || (msg_p->id != 0x5c4u)) {
        return (-EINVAL);
    }

    dst_p->tbox_rem_pwr_batt_resv_heatg_req = unpack_right_shift_u8(msg_p->data[0], 7u, 0x80u);
    dst_p->tbox_rem_pwr_batt_open_heatg_req = unpack_right_shift_u8(msg_p->data[0], 5u, 0x60u);
    dst_p->tbox_rem_sc_mod_req = unpack_right_shift_u8(msg_p->data[0], 3u, 0x18u);
    dst_p->tbox_terminal_rem_wakeup_sig = unpack_right_shift_u8(msg_p->data[0], 2u, 0x04u);
    dst_p->tbox_ota_own_condchk = unpack_right_shift_u8(msg_p->data[0], 0u, 0x03u);
    dst_p->tbox_rem_ecc_resv_defrst_req = unpack_right_shift_u8(msg_p->data[1], 7u, 0x80u);
    dst_p->tbox_rem_ecc_defrst_mod_req = unpack_right_shift_u8(msg_p->data[1], 5u, 0x60u);
    dst_p->tbox_rem_insd_info_disp_ena = unpack_right_shift_u8(msg_p->data[1], 4u, 0x10u);
    dst_p->tbox_rem_ecc_set_t = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->tbox_rem_resv_ecc_set_t = unpack_right_shift_u8(msg_p->data[4], 0u, 0xffu);
    dst_p->tbox_rem_soc_max = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->tbox_wifi_error = unpack_right_shift_u8(msg_p->data[6], 7u, 0x80u);
    dst_p->tbox_ehu_not_conn = unpack_right_shift_u8(msg_p->data[6], 6u, 0x40u);
    dst_p->tbox_tsp_not_conn = unpack_right_shift_u8(msg_p->data[6], 5u, 0x20u);
    dst_p->tbox_conn_typ = unpack_right_shift_u8(msg_p->data[6], 2u, 0x1cu);
    dst_p->tbox_4_g_sig_ind = unpack_right_shift_u8(msg_p->data[6], 0u, 0x03u);
    dst_p->tbox_ota_inhb_req = unpack_right_shift_u8(msg_p->data[7], 6u, 0xc0u);
    dst_p->tbox_rem_swh_req = unpack_right_shift_u8(msg_p->data[7], 4u, 0x30u);
    dst_p->tbox_4_g_loss = unpack_right_shift_u8(msg_p->data[7], 3u, 0x08u);
    dst_p->tbox_volt_high = unpack_right_shift_u8(msg_p->data[7], 2u, 0x04u);
    dst_p->tbox_volt_low = unpack_right_shift_u8(msg_p->data[7], 1u, 0x02u);
    dst_p->tbox_inner_batt_error = unpack_right_shift_u8(msg_p->data[7], 0u, 0x01u);
    dst_p->tbox_5_c4_s_sec_oc_fresh_byte0 = unpack_right_shift_u8(msg_p->data[8], 0u, 0xffu);
    dst_p->tbox_5_c4_s_sec_oc_mac_byte0 = unpack_right_shift_u8(msg_p->data[9], 0u, 0xffu);
    dst_p->tbox_5_c4_s_sec_oc_mac_byte1 = unpack_right_shift_u8(msg_p->data[10], 0u, 0xffu);
    dst_p->tbox_5_c4_s_sec_oc_mac_byte2 = unpack_right_shift_u8(msg_p->data[11], 0u, 0xffu);

    return (0);
}

int fm29_dbc_tbox_0x5_c4_init(struct fm29_dbc_tbox_0x5_c4_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x5_c4_t));
    msg_p->tbox_rem_pwr_batt_resv_heatg_req = 0;
    msg_p->tbox_rem_pwr_batt_open_heatg_req = 0;
    msg_p->tbox_rem_sc_mod_req = 0;
    msg_p->tbox_terminal_rem_wakeup_sig = 0;
    msg_p->tbox_ota_own_condchk = 0;
    msg_p->tbox_rem_ecc_resv_defrst_req = 0;
    msg_p->tbox_rem_ecc_defrst_mod_req = 0;
    msg_p->tbox_rem_insd_info_disp_ena = 0;
    msg_p->tbox_rem_ecc_set_t = 0;
    msg_p->tbox_rem_resv_ecc_set_t = 0;
    msg_p->tbox_wifi_error = 0;
    msg_p->tbox_ehu_not_conn = 0;
    msg_p->tbox_tsp_not_conn = 0;
    msg_p->tbox_conn_typ = 0;
    msg_p->tbox_4_g_sig_ind = 0;
    msg_p->tbox_ota_inhb_req = 0;
    msg_p->tbox_rem_swh_req = 0;
    msg_p->tbox_4_g_loss = 0;
    msg_p->tbox_volt_high = 0;
    msg_p->tbox_volt_low = 0;
    msg_p->tbox_inner_batt_error = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_pwr_batt_resv_heatg_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_pwr_batt_resv_heatg_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_pwr_batt_resv_heatg_req_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_pwr_batt_open_heatg_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_pwr_batt_open_heatg_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_pwr_batt_open_heatg_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_sc_mod_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_sc_mod_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_sc_mod_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_terminal_rem_wakeup_sig_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_terminal_rem_wakeup_sig_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_terminal_rem_wakeup_sig_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_ota_own_condchk_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_ota_own_condchk_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_ota_own_condchk_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_resv_defrst_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_resv_defrst_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_resv_defrst_req_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_defrst_mod_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_defrst_mod_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_defrst_mod_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_insd_info_disp_ena_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_insd_info_disp_ena_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_insd_info_disp_ena_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_set_t_encode(double value)
{
    return (uint8_t)(value / 0.5);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_set_t_decode(uint8_t value)
{
    return ((double)value * 0.5);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_ecc_set_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_resv_ecc_set_t_encode(double value)
{
    return (uint8_t)(value / 0.5);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_resv_ecc_set_t_decode(uint8_t value)
{
    return ((double)value * 0.5);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_resv_ecc_set_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_soc_max_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_soc_max_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_soc_max_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_wifi_error_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_wifi_error_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_wifi_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_ehu_not_conn_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_ehu_not_conn_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_ehu_not_conn_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_tsp_not_conn_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_tsp_not_conn_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_tsp_not_conn_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_conn_typ_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_conn_typ_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_conn_typ_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_4_g_sig_ind_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_4_g_sig_ind_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_4_g_sig_ind_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_ota_inhb_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_ota_inhb_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_ota_inhb_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_rem_swh_req_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_rem_swh_req_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_rem_swh_req_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_4_g_loss_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_4_g_loss_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_4_g_loss_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_volt_high_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_volt_high_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_volt_high_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_volt_low_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_volt_low_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_volt_low_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_inner_batt_error_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_inner_batt_error_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_inner_batt_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_fresh_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_fresh_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_fresh_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte0_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte0_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte0_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte1_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte1_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte1_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte2_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte2_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x5_c4_tbox_5_c4_s_sec_oc_mac_byte2_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int fm29_dbc_tbox_0x61_a_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x61_a_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x61au;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[2] |= pack_left_shift_u8(src_p->tbox_rem_dtc_dmd, 0u, 0x01u);
    msg.data[3] |= pack_right_shift_u16(src_p->tbox_drv_rng_cld, 2u, 0xffu);
    msg.data[4] |= pack_left_shift_u16(src_p->tbox_drv_rng_cld, 6u, 0xc0u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_drv_rng_cld_vld, 4u, 0x30u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x61_a_unpack(
    struct fm29_dbc_tbox_0x61_a_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x61au)) {
        return (-EINVAL);
    }

    dst_p->tbox_rem_dtc_dmd = unpack_right_shift_u8(msg_p->data[2], 0u, 0x01u);
    dst_p->tbox_drv_rng_cld = unpack_left_shift_u16(msg_p->data[3], 2u, 0xffu);
    dst_p->tbox_drv_rng_cld |= unpack_right_shift_u16(msg_p->data[4], 6u, 0xc0u);
    dst_p->tbox_drv_rng_cld_vld = unpack_right_shift_u8(msg_p->data[4], 4u, 0x30u);

    return (0);
}

int fm29_dbc_tbox_0x61_a_init(struct fm29_dbc_tbox_0x61_a_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x61_a_t));
    msg_p->tbox_rem_dtc_dmd = 0;
    msg_p->tbox_drv_rng_cld_vld = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x61_a_tbox_rem_dtc_dmd_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x61_a_tbox_rem_dtc_dmd_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x61_a_tbox_rem_dtc_dmd_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t fm29_dbc_tbox_0x61_a_tbox_drv_rng_cld_encode(double value)
{
    return (uint16_t)(value);
}

double fm29_dbc_tbox_0x61_a_tbox_drv_rng_cld_decode(uint16_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x61_a_tbox_drv_rng_cld_is_in_range(uint16_t value)
{
    return (value <= 1000u);
}

uint8_t fm29_dbc_tbox_0x61_a_tbox_drv_rng_cld_vld_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x61_a_tbox_drv_rng_cld_vld_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x61_a_tbox_drv_rng_cld_vld_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int fm29_dbc_tbox_0x62_f_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_tbox_0x62_f_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x62fu;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->tbox_zone_t, 1u, 0xfeu);
    msg.data[2] |= pack_left_shift_u8(src_p->tbox_crt_ti_day, 3u, 0xf8u);
    msg.data[3] |= pack_left_shift_u8(src_p->tbox_crt_ti_hr, 3u, 0xf8u);
    msg.data[4] |= pack_left_shift_u8(src_p->tbox_crt_ti_mins, 0u, 0x3fu);
    msg.data[5] |= pack_left_shift_u8(src_p->tbox_crt_ti_yr, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->tbox_crt_ti_mth, 4u, 0xf0u);
    msg.data[7] |= pack_left_shift_u8(src_p->tbox_crt_ti_sec, 2u, 0xfcu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_tbox_0x62_f_unpack(
    struct fm29_dbc_tbox_0x62_f_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x62fu)) {
        return (-EINVAL);
    }

    dst_p->tbox_zone_t = unpack_right_shift_u8(msg_p->data[0], 1u, 0xfeu);
    dst_p->tbox_crt_ti_day = unpack_right_shift_u8(msg_p->data[2], 3u, 0xf8u);
    dst_p->tbox_crt_ti_hr = unpack_right_shift_u8(msg_p->data[3], 3u, 0xf8u);
    dst_p->tbox_crt_ti_mins = unpack_right_shift_u8(msg_p->data[4], 0u, 0x3fu);
    dst_p->tbox_crt_ti_yr = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->tbox_crt_ti_mth = unpack_right_shift_u8(msg_p->data[6], 4u, 0xf0u);
    dst_p->tbox_crt_ti_sec = unpack_right_shift_u8(msg_p->data[7], 2u, 0xfcu);

    return (0);
}

int fm29_dbc_tbox_0x62_f_init(struct fm29_dbc_tbox_0x62_f_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_tbox_0x62_f_t));
    msg_p->tbox_crt_ti_day = 0;
    msg_p->tbox_crt_ti_hr = 0;
    msg_p->tbox_crt_ti_mins = 0;
    msg_p->tbox_crt_ti_yr = 0;
    msg_p->tbox_crt_ti_mth = 0;
    msg_p->tbox_crt_ti_sec = 0;

    return 0;
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_zone_t_encode(double value)
{
    return (uint8_t)((value - -720.0) / 15.0);
}

double fm29_dbc_tbox_0x62_f_tbox_zone_t_decode(uint8_t value)
{
    return (((double)value * 15.0) + -720.0);
}

bool fm29_dbc_tbox_0x62_f_tbox_zone_t_is_in_range(uint8_t value)
{
    return (value <= 127u);
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_crt_ti_day_encode(double value)
{
    return (uint8_t)(value - 1.0);
}

double fm29_dbc_tbox_0x62_f_tbox_crt_ti_day_decode(uint8_t value)
{
    return ((double)value + 1.0);
}

bool fm29_dbc_tbox_0x62_f_tbox_crt_ti_day_is_in_range(uint8_t value)
{
    return (value <= 30u);
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_crt_ti_hr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x62_f_tbox_crt_ti_hr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x62_f_tbox_crt_ti_hr_is_in_range(uint8_t value)
{
    return (value <= 23u);
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_crt_ti_mins_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x62_f_tbox_crt_ti_mins_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x62_f_tbox_crt_ti_mins_is_in_range(uint8_t value)
{
    return (value <= 59u);
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_crt_ti_yr_encode(double value)
{
    return (uint8_t)(value - 2015.0);
}

double fm29_dbc_tbox_0x62_f_tbox_crt_ti_yr_decode(uint8_t value)
{
    return ((double)value + 2015.0);
}

bool fm29_dbc_tbox_0x62_f_tbox_crt_ti_yr_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_crt_ti_mth_encode(double value)
{
    return (uint8_t)(value - 1.0);
}

double fm29_dbc_tbox_0x62_f_tbox_crt_ti_mth_decode(uint8_t value)
{
    return ((double)value + 1.0);
}

bool fm29_dbc_tbox_0x62_f_tbox_crt_ti_mth_is_in_range(uint8_t value)
{
    return (value <= 11u);
}

uint8_t fm29_dbc_tbox_0x62_f_tbox_crt_ti_sec_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_tbox_0x62_f_tbox_crt_ti_sec_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_tbox_0x62_f_tbox_crt_ti_sec_is_in_range(uint8_t value)
{
    return (value <= 59u);
}

int fm29_dbc_bms_tbox_info_2_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_bms_tbox_info_2_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x63au;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->bms_pwr_batt_typ, 4u, 0xf0u);
    msg.data[0] |= pack_left_shift_u8(src_p->bms_splr, 0u, 0x0fu);
    msg.data[1] |= pack_left_shift_u8(src_p->bms_pwr_batt_pwr_sts_soh, 0u, 0xffu);
    msg.data[2] |= pack_left_shift_u8(src_p->bms_pwr_batt_pack_serl_nr, 0u, 0xffu);
    msg.data[3] |= pack_left_shift_u8(src_p->bms_pwr_batt_pack_prll_nr, 0u, 0xffu);
    msg.data[4] |= pack_right_shift_u16(src_p->bms_cell_cp, 8u, 0xffu);
    msg.data[5] |= pack_left_shift_u16(src_p->bms_cell_cp, 0u, 0xffu);
    msg.data[6] |= pack_right_shift_u16(src_p->bms_dcha_end_cell_volt, 4u, 0xffu);
    msg.data[7] |= pack_left_shift_u16(src_p->bms_dcha_end_cell_volt, 4u, 0xf0u);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_bms_tbox_info_2_unpack(
    struct fm29_dbc_bms_tbox_info_2_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x63au)) {
        return (-EINVAL);
    }

    dst_p->bms_pwr_batt_typ = unpack_right_shift_u8(msg_p->data[0], 4u, 0xf0u);
    dst_p->bms_splr = unpack_right_shift_u8(msg_p->data[0], 0u, 0x0fu);
    dst_p->bms_pwr_batt_pwr_sts_soh = unpack_right_shift_u8(msg_p->data[1], 0u, 0xffu);
    dst_p->bms_pwr_batt_pack_serl_nr = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->bms_pwr_batt_pack_prll_nr = unpack_right_shift_u8(msg_p->data[3], 0u, 0xffu);
    dst_p->bms_cell_cp = unpack_left_shift_u16(msg_p->data[4], 8u, 0xffu);
    dst_p->bms_cell_cp |= unpack_right_shift_u16(msg_p->data[5], 0u, 0xffu);
    dst_p->bms_dcha_end_cell_volt = unpack_left_shift_u16(msg_p->data[6], 4u, 0xffu);
    dst_p->bms_dcha_end_cell_volt |= unpack_right_shift_u16(msg_p->data[7], 4u, 0xf0u);

    return (0);
}

int fm29_dbc_bms_tbox_info_2_init(struct fm29_dbc_bms_tbox_info_2_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_bms_tbox_info_2_t));
    msg_p->bms_pwr_batt_typ = 0;
    msg_p->bms_splr = 0;

    return 0;
}

uint8_t fm29_dbc_bms_tbox_info_2_bms_pwr_batt_typ_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_tbox_info_2_bms_pwr_batt_typ_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_tbox_info_2_bms_pwr_batt_typ_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_tbox_info_2_bms_splr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_tbox_info_2_bms_splr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_tbox_info_2_bms_splr_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pwr_sts_soh_encode(double value)
{
    return (uint8_t)(value / 0.01);
}

double fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pwr_sts_soh_decode(uint8_t value)
{
    return ((double)value * 0.01);
}

bool fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pwr_sts_soh_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pack_serl_nr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pack_serl_nr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pack_serl_nr_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pack_prll_nr_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pack_prll_nr_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_bms_tbox_info_2_bms_pwr_batt_pack_prll_nr_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_tbox_info_2_bms_cell_cp_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double fm29_dbc_bms_tbox_info_2_bms_cell_cp_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool fm29_dbc_bms_tbox_info_2_bms_cell_cp_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t fm29_dbc_bms_tbox_info_2_bms_dcha_end_cell_volt_encode(double value)
{
    return (uint16_t)(value / 0.01);
}

double fm29_dbc_bms_tbox_info_2_bms_dcha_end_cell_volt_decode(uint16_t value)
{
    return ((double)value * 0.01);
}

bool fm29_dbc_bms_tbox_info_2_bms_dcha_end_cell_volt_is_in_range(uint16_t value)
{
    return (value <= 2550u);
}

int fm29_dbc_ecc_0x644_sendMsg(
	comm::canBrokerTx *canb_p,
    const struct fm29_dbc_ecc_0x644_t *src_p)
{
    comm::canBroker_fdMsg_t msg;
    msg.id = 0x644u;
    memset(&msg.data[0], 0, sizeof(msg.data));
    msg.dlc = 8u;

    msg.data[0] |= pack_left_shift_u8(src_p->ecc_644_check_sum, 0u, 0xffu);
    msg.data[1] |= pack_left_shift_u8(src_p->ecc_644_alive_counter, 0u, 0x0fu);
    msg.data[2] |= pack_left_shift_u8(src_p->ecc_re_mot_outl_t, 0u, 0xffu);
    msg.data[3] |= pack_left_shift_u8(src_p->ecc_coolt_hom_sts, 7u, 0x80u);
    msg.data[3] |= pack_left_shift_u8(src_p->ecc_coolg_dfct, 6u, 0x40u);
    msg.data[4] |= pack_left_shift_u8(src_p->ecc_pdu_inl_t, 0u, 0xffu);
    msg.data[5] |= pack_left_shift_u8(src_p->ecc_frnt_mot_outl_t, 0u, 0xffu);
    msg.data[6] |= pack_left_shift_u8(src_p->ecc_mcur_inl_t, 0u, 0xffu);

    canb_p->sendCanMsg(&msg);

    return (8);
}

int fm29_dbc_ecc_0x644_unpack(
    struct fm29_dbc_ecc_0x644_t *dst_p,
    comm::canBroker_fdMsg_t *msg_p)
{
    if ((msg_p->dlc != 8u) || (msg_p->id != 0x644u)) {
        return (-EINVAL);
    }

    dst_p->ecc_644_check_sum = unpack_right_shift_u8(msg_p->data[0], 0u, 0xffu);
    dst_p->ecc_644_alive_counter = unpack_right_shift_u8(msg_p->data[1], 0u, 0x0fu);
    dst_p->ecc_re_mot_outl_t = unpack_right_shift_u8(msg_p->data[2], 0u, 0xffu);
    dst_p->ecc_coolt_hom_sts = unpack_right_shift_u8(msg_p->data[3], 7u, 0x80u);
    dst_p->ecc_coolg_dfct = unpack_right_shift_u8(msg_p->data[3], 6u, 0x40u);
    dst_p->ecc_pdu_inl_t = unpack_right_shift_u8(msg_p->data[4], 0u, 0xffu);
    dst_p->ecc_frnt_mot_outl_t = unpack_right_shift_u8(msg_p->data[5], 0u, 0xffu);
    dst_p->ecc_mcur_inl_t = unpack_right_shift_u8(msg_p->data[6], 0u, 0xffu);

    return (0);
}

int fm29_dbc_ecc_0x644_init(struct fm29_dbc_ecc_0x644_t *msg_p)
{
    if (msg_p == NULL) return -1;

    memset(msg_p, 0, sizeof(struct fm29_dbc_ecc_0x644_t));
    msg_p->ecc_coolt_hom_sts = 0;
    msg_p->ecc_coolg_dfct = 0;

    return 0;
}

uint8_t fm29_dbc_ecc_0x644_ecc_644_check_sum_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x644_ecc_644_check_sum_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x644_ecc_644_check_sum_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x644_ecc_644_alive_counter_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x644_ecc_644_alive_counter_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x644_ecc_644_alive_counter_is_in_range(uint8_t value)
{
    return (value <= 14u);
}

uint8_t fm29_dbc_ecc_0x644_ecc_re_mot_outl_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_ecc_0x644_ecc_re_mot_outl_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_ecc_0x644_ecc_re_mot_outl_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x644_ecc_coolt_hom_sts_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x644_ecc_coolt_hom_sts_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x644_ecc_coolt_hom_sts_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x644_ecc_coolg_dfct_encode(double value)
{
    return (uint8_t)(value);
}

double fm29_dbc_ecc_0x644_ecc_coolg_dfct_decode(uint8_t value)
{
    return ((double)value);
}

bool fm29_dbc_ecc_0x644_ecc_coolg_dfct_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t fm29_dbc_ecc_0x644_ecc_pdu_inl_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_ecc_0x644_ecc_pdu_inl_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_ecc_0x644_ecc_pdu_inl_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x644_ecc_frnt_mot_outl_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_ecc_0x644_ecc_frnt_mot_outl_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_ecc_0x644_ecc_frnt_mot_outl_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t fm29_dbc_ecc_0x644_ecc_mcur_inl_t_encode(double value)
{
    return (uint8_t)(value - -48.0);
}

double fm29_dbc_ecc_0x644_ecc_mcur_inl_t_decode(uint8_t value)
{
    return ((double)value + -48.0);
}

bool fm29_dbc_ecc_0x644_ecc_mcur_inl_t_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}
